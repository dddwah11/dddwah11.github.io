{"meta":{"title":"小刘","subtitle":"小刘","description":"小刘的个人博客","author":"61分","url":"https://dddwah11.github.io","root":"/"},"pages":[{"title":"about","date":"2025-05-24T06:56:13.000Z","updated":"2025-05-24T07:00:20.452Z","comments":false,"path":"about/index.html","permalink":"https://dddwah11.github.io/about/index.html","excerpt":"","text":"欢迎来到小刘的博客，每天进步一点点📝"},{"title":"tags","date":"2025-05-24T09:58:11.000Z","updated":"2025-05-24T09:59:21.348Z","comments":false,"path":"tags/index.html","permalink":"https://dddwah11.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2025-05-24T09:58:30.000Z","updated":"2025-05-24T09:59:00.728Z","comments":false,"path":"categories/index.html","permalink":"https://dddwah11.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"测试文章","slug":"25524/测试文章","date":"2025-05-24T07:46:22.000Z","updated":"2025-05-24T10:03:30.984Z","comments":true,"path":"2025/05/24/25524/测试文章/","link":"","permalink":"https://dddwah11.github.io/2025/05/24/25524/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","excerpt":"","text":"测试文章","categories":[{"name":"学习","slug":"学习","permalink":"https://dddwah11.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://dddwah11.github.io/tags/%E6%B5%8B%E8%AF%95/"}]},{"title":"","slug":"5-5/项目_后端","date":"2022-05-07T04:45:10.116Z","updated":"2022-05-14T09:17:55.534Z","comments":true,"path":"2022/05/07/5-5/项目_后端/","link":"","permalink":"https://dddwah11.github.io/2022/05/07/5-5/%E9%A1%B9%E7%9B%AE_%E5%90%8E%E7%AB%AF/","excerpt":"","text":"1、配置1.1、相关依赖父项目pom.xml中的版本控制 12345678910111213141516 &lt;properties&gt;&lt;!-- mybatis-plus--&gt; &lt;mp.version&gt;3.5.0&lt;/mp.version&gt;&lt;!-- mybatis-plus-generator--&gt; &lt;mpg.version&gt;3.4.0&lt;/mpg.version&gt;&lt;!-- swagger--&gt; &lt;swagger.version&gt;2.9.2&lt;/swagger.version&gt;&lt;!-- velocity模板引擎--&gt; &lt;velocity.version&gt;2.3&lt;/velocity.version&gt;&lt;!-- mysql--&gt; &lt;mysql-java.version&gt;8.0.28&lt;/mysql-java.version&gt;&lt;!-- lombok--&gt; &lt;lombok.version&gt;1.18.22&lt;/lombok.version&gt;&lt;!-- knife4j增强文本--&gt; &lt;knife4j.version&gt;2.0.7&lt;/knife4j.version&gt; &lt;/properties&gt; 依赖 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!-- mybatis-plus--&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mp.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;!-- swagger ui--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;!-- swagger2--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;!-- mysql数据库--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql-java.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;!-- mybatis-plus模板引擎--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;$&#123;velocity.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;!-- 代码自动生成--&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;$&#123;mpg.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;!-- lombok--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;!-- knife4j--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;knife4j-spring-bootstarter&lt;/artifactId&gt; &lt;version&gt;$&#123;knife4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; 1.2、创建两个子maven项目web（springboot项目） 依赖于commons项目 1234567&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.xiaoliu&lt;/groupId&gt; &lt;artifactId&gt;helovue-base-common&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 配置文件 123456789101112131415161718192021222324spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/xinguan?useUnicode=true&amp;serveTimezone=UTC&amp;useSSL=false&amp;characterEncoding=utf8 username: root password: 123456 jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8server: port: 8081mybatis-plus: configuration: log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl global-config: db-config: logic-delete-field: deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2) logic-delete-value: 1 # 逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0) mapper-locations: classpath*:/mapper/*.xml 启动类： 12345678@SpringBootApplication@MapperScan(&quot;com.xiaoliu.system.mapper&quot;)@EnableSwagger2public class xitongApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(xitongApplication.class,args); &#125;&#125; base-common(设置配置等统一处理)依赖于父项目 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;dependencies&gt; &lt;dependency&gt; &lt;!-- controller层--&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 数据访问层--&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- mybatis自动代码生成--&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- mybatis-plus模板引擎--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- java连接mysql--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- swagger2--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- swaggerui--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- lombok--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt;&lt;!-- knife4j--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 2、自动生成代码2.1、需要依赖（配置时已导入）mybatis-plus(持久层框架)、velocity(mybatis-plus模板引擎)、mybatis-plus-generator(代码自动生成) CodeGenerator.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091public class CodeGenerator &#123; /** * &lt;p&gt; * 读取控制台内容 * &lt;/p&gt; */ public static String scanner(String tip) &#123; Scanner scanner = new Scanner(System.in); StringBuilder help = new StringBuilder(); help.append(&quot;请输入&quot; + tip + &quot;：&quot;); System.out.println(help.toString()); if (scanner.hasNext()) &#123; String ipt = scanner.next(); if (StringUtils.isNotBlank(ipt)) &#123; return ipt; &#125; &#125; throw new MybatisPlusException(&quot;正确的&quot; + tip + &quot;！&quot;); &#125; public static void main(String[] args) &#123; // 创建代码生成器对象 AutoGenerator mpg = new AutoGenerator(); // 全局配置 GlobalConfig gc = new GlobalConfig(); gc.setOutputDir(scanner(&quot;你的项目路径&quot;) + &quot;/src/main/java&quot;); gc.setAuthor(&quot;xiaoliu&quot;);// 生成之后是否打开资源管理器 gc.setOpen(false);// 是否覆盖文件 gc.setFileOverride(false);// %s占位符// mp生成service层代码，默认的接口名称第一张字母是有I gc.setServiceName(&quot;%sService&quot;);// 设置主键生成策略 自动增长 gc.setIdType(IdType.AUTO);// 设置date的类型 默认只使用 java.util.date 代替 gc.setDateType(DateType.ONLY_DATE); //开启实体属性 Swagger2 注解 gc.setSwagger2(true); mpg.setGlobalConfig(gc); // 数据源配置 DataSourceConfig dsc = new DataSourceConfig(); dsc.setUrl(&quot;jdbc:mysql://localhost:3306/xinguan?useUnicode=true&amp;serveTimezone=UTC&amp;useSSL=false&amp;characterEncoding=utf8&quot;); dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;); dsc.setUsername(&quot;root&quot;); dsc.setPassword(&quot;123456&quot;);// 设置数据库类型 dsc.setDbType(DbType.MYSQL); mpg.setDataSource(dsc); // 包配置 PackageConfig pc = new PackageConfig(); pc.setModuleName(scanner(&quot;模块名&quot;)); pc.setParent(&quot;com.xiaoliu&quot;); // 设置包 pc.setController(&quot;controller&quot;); pc.setService(&quot;service&quot;); pc.setServiceImpl(&quot;service.impl&quot;); pc.setMapper(&quot;mapper&quot;); pc.setEntity(&quot;pojo&quot;); pc.setXml(&quot;mapper&quot;); mpg.setPackageInfo(pc); // 策略配置 StrategyConfig strategy = new StrategyConfig();//设置哪些表需要自动生成 strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));//实体类名称驼峰命名 strategy.setNaming(NamingStrategy.underline_to_camel);// 列名驼峰命名 strategy.setColumnNaming(NamingStrategy.underline_to_camel);// 使用lombok模型 strategy.setEntityLombokModel(true);// 使用restful风格设置api strategy.setRestControllerStyle(true);//驼峰转连字符 strategy.setControllerMappingHyphenStyle(true);// strategy.getFieldPrefix(&quot;前缀&quot;); 可忽略表中的前缀 mpg.setStrategy(strategy); mpg.execute(); &#125;&#125; 3、统一返回结果在common项目的response目录下 接口 CustomizeResultCode 1234567891011121314151617181920package com.xiaoliu.response;/** * @author: 61分 * @date: 2022/5/7 12:52 * @description: */public interface CustomizeResultCode &#123; /** * 返回错误码 * @return */ Integer getCode(); /** * 返回错误信息 * @return */ String getMessage();&#125; 枚举类（保护属性） ResultCode 123456789101112131415161718192021222324252627282930313233343536373839404142public enum ResultCode implements CustomizeResultCode&#123; /** * 20000，成功 */ SUCCESS(20000,&quot;成功&quot;), /** * 20001，失败 */ ERROR(20001,&quot;失败&quot;), /** * 20002，算术异常 */ ARITHMETICEXCEPTION(20002,&quot;算术异常&quot;), /** * 20003，用户不存在 */ USER_NOFOUND_EXCEPTION(20003,&quot;用户不存在&quot;), ; private Integer code; private String message; ResultCode(Integer code,String message)&#123; this.code = code; this.message = message; &#125; @Override public Integer getCode() &#123; return code; &#125; @Override public String getMessage() &#123; return message; &#125;&#125; 实现类 Result 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/** * @author: 61分 * @date: 2022/5/7 13:00 * @description:公共返回结果 */@Datapublic class Result &#123; @ApiModelProperty(value = &quot;是否成功&quot;) private boolean success; @ApiModelProperty(value = &quot;返回码&quot;) private Integer code; @ApiModelProperty(value = &quot;返回消息&quot;) private String message; @ApiModelProperty(value = &quot;返回的数据&quot;) private Map&lt;String,Object&gt; data = new HashMap&lt;&gt;(); /** * 构造方法私有，保护属性 */ private Result()&#123;&#125;; public static Result ok()&#123; Result result = new Result(); result.setSuccess(true); result.setCode(ResultCode.SUCCESS.getCode()); result.setMessage(ResultCode.SUCCESS.getMessage()); return result; &#125;// 使用链式编程 public static Result error()&#123; Result result = new Result(); result.setSuccess(false); result.setCode(ResultCode.ERROR.getCode()); result.setMessage(ResultCode.ERROR.getMessage()); return result; &#125; /** * 自定义返回 * @param success * @return */ public Result success(Boolean success)&#123; this.setSuccess(success); return this; &#125; public Result message(String message)&#123; this.setMessage(message); return this; &#125; public Result code(Integer code)&#123; this.setCode(code); return this; &#125; public Result data(String key,Object value)&#123; this.data.put(key, value); return this; &#125; public Result data(Map&lt;String,Object&gt; map)&#123; this.setData(map); return this; &#125;&#125; 4、统一异常处理common项目的handler目录下 全局的异常处理 GlobalExceptionHandler 12345678910111213141516171819202122232425262728293031/** * @author: 61分 * @date: 2022/5/7 14:52 * @description:统一异常处理 */@ControllerAdvice@Slf4jpublic class GlobalExceptionHandler &#123; @ExceptionHandler(Exception.class) @ResponseBody public Result error(Exception e) &#123; log.error(e.getMessage()); return Result.error(); &#125; @ExceptionHandler(ArithmeticException.class) @ResponseBody public Result error(ArithmeticException e) &#123; log.error(e.getMessage()); return Result.error().code(ResultCode.ARITHMETICEXCEPTION.getCode()) .message(ResultCode.ARITHMETICEXCEPTION.getMessage()); &#125; @ExceptionHandler(BusinessException.class) @ResponseBody public Result error(BusinessException e) &#123; log.error(e.getErrMsg()); return Result.error().code(e.getCode()) .message(e.getErrMsg()); &#125;&#125; 返回状态码接口的信息 BusinessException 12345678910@Data@AllArgsConstructor@NoArgsConstructorpublic class BusinessException extends RuntimeException&#123; @ApiModelProperty(value = &quot;状态码&quot;) private Integer code; @ApiModelProperty(value = &quot;错误信息&quot;) private String errMsg;&#125; 5、统一日志处理（knife4j美化swagger2）需要knife4j依赖， 在common项目的config目录下 Knife4jConfiguration 1234567891011121314151617181920212223@Configurationpublic class Knife4jConfiguration &#123; @Bean(value = &quot;defaultApi2&quot;) public Docket defaultApi2() &#123; Docket docket=new Docket(DocumentationType.SWAGGER_2) .apiInfo(new ApiInfoBuilder() //.title(&quot;swagger-bootstrap-ui-demo RESTful APIs&quot;) .description(&quot;# swagger-bootstrap-ui-demo RESTful APIs&quot;) .termsOfServiceUrl(&quot;http://www.xx.com/&quot;) .contact(&quot;xx@qq.com&quot;) .version(&quot;1.0&quot;) .build()) //分组名称 .groupName(&quot;2.X版本&quot;) .select() //这里指定Controller扫描包路径 .apis(RequestHandlerSelectors.basePackage(&quot;com.xiaoliu.system.controller&quot;)) .paths(PathSelectors.any()) .build(); return docket; &#125;&#125; 之后访问xxx&#x2F;doc.html 6、统一生成的日志管理LogBack 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL --&gt;&lt;!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 --&gt;&lt;!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 --&gt;&lt;!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 --&gt;&lt;!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;&lt;!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; &lt;!-- 动态日志级别 --&gt; &lt;jmxConfigurator/&gt; &lt;!--*****************************************************************************--&gt; &lt;!--自定义项 开始--&gt; &lt;!--*****************************************************************************--&gt; &lt;!-- 定义日志文件 输出位置 --&gt; &lt;property name=&quot;log.home_dir&quot; value=&quot;E:/BliBli/xinguan/logs&quot;/&gt; &lt;property name=&quot;log.app_name&quot; value=&quot;http-demo&quot;/&gt; &lt;!-- 日志最大的历史 30天 --&gt; &lt;property name=&quot;log.maxHistory&quot; value=&quot;30&quot;/&gt; &lt;property name=&quot;log.maxSize&quot; value=&quot;5MB&quot;/&gt; &lt;!-- 日志界别 --&gt; &lt;property name=&quot;log.level&quot; value=&quot;info&quot;/&gt; &lt;!-- 打印sql语句 需要指定dao/mapper层包的位置 --&gt; &lt;property name=&quot;mapper.package&quot; value=&quot;com.xiaoge.system.mapper&quot;/&gt; &lt;!-- 彩色日志 --&gt; &lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt; &lt;!-- magenta:洋红 --&gt; &lt;!-- boldMagenta:粗红--&gt; &lt;!-- cyan:青色 --&gt; &lt;!-- white:白色 --&gt; &lt;!-- magenta:洋红 --&gt; &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot; value=&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;/&gt; &lt;!--*****************************************************************************--&gt; &lt;!--自定义项 结束--&gt; &lt;!--*****************************************************************************--&gt; &lt;!-- ConsoleAppender 控制台输出日志 --&gt; &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt; &lt;!-- 设置日志输出格式 --&gt; $&#123;CONSOLE_LOG_PATTERN&#125; &lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- ERROR级别日志 --&gt; &lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender --&gt; &lt;appender name=&quot;ERROR&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 过滤器，只记录WARN级别的日志 --&gt; &lt;!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;!-- 设置过滤级别 --&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;!-- 用于配置符合过滤条件的操作 --&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;!-- 用于配置不符合过滤条件的操作 --&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;!--日志输出位置 可相对、和绝对路径 --&gt; &lt;fileNamePattern&gt; $&#123;log.home_dir&#125;/error/%d&#123;yyyy-MM-dd&#125;/$&#123;log.app_name&#125;-%i.log &lt;/fileNamePattern&gt; &lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,假设设置每个月滚动，且&lt;maxHistory&gt;是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 --&gt; &lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt; &lt;!--日志文件最大的大小--&gt; &lt;MaxFileSize&gt;$&#123;log.maxSize&#125;&lt;/MaxFileSize&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt; &lt;!-- 设置日志输出格式 --&gt; %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n &lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- WARN级别日志 appender --&gt; &lt;appender name=&quot;WARN&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 过滤器，只记录WARN级别的日志 --&gt; &lt;!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;!-- 设置过滤级别 --&gt; &lt;level&gt;WARN&lt;/level&gt; &lt;!-- 用于配置符合过滤条件的操作 --&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;!-- 用于配置不符合过滤条件的操作 --&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;!--日志输出位置 可相对、和绝对路径 --&gt; &lt;fileNamePattern&gt;$&#123;log.home_dir&#125;/warn/%d&#123;yyyy-MM-dd&#125;/$&#123;log.app_name&#125;-%i.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt; &lt;!--当天的日志大小 超过MaxFileSize时,压缩日志并保存--&gt; &lt;MaxFileSize&gt;$&#123;log.maxSize&#125;&lt;/MaxFileSize&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- INFO级别日志 appender --&gt; &lt;appender name=&quot;INFO&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;INFO&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log.home_dir&#125;/info/%d&#123;yyyy-MM-dd&#125;/$&#123;log.app_name&#125;-%i.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt; &lt;MaxFileSize&gt;$&#123;log.maxSize&#125;&lt;/MaxFileSize&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- DEBUG级别日志 appender --&gt; &lt;appender name=&quot;DEBUG&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;DEBUG&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log.home_dir&#125;/debug/%d&#123;yyyy-MM-dd&#125;/$&#123;log.app_name&#125;-%i.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt; &lt;MaxFileSize&gt;$&#123;log.maxSize&#125;&lt;/MaxFileSize&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- TRACE级别日志 appender --&gt; &lt;appender name=&quot;TRACE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;TRACE&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log.home_dir&#125;/trace/%d&#123;yyyy-MM-dd&#125;/$&#123;log.app_name&#125;-%i.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt; &lt;MaxFileSize&gt;$&#123;log.maxSize&#125;&lt;/MaxFileSize&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--设置一个向上传递的appender,所有级别的日志都会输出--&gt; &lt;appender name=&quot;app&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log.home_dir&#125;/app/%d&#123;yyyy-MM-dd&#125;/$&#123;log.app_name&#125;-%i.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;$&#123;log.maxHistory&#125;&lt;/maxHistory&gt; &lt;MaxFileSize&gt;$&#123;log.maxSize&#125;&lt;/MaxFileSize&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %logger - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--org.springframework.web包下的类的日志输出--&gt; &lt;logger name=&quot;org.springframework.web&quot; additivity=&quot;false&quot; level=&quot;WARN&quot;&gt; &lt;appender-ref ref=&quot;WARN&quot;/&gt; &lt;/logger&gt; &lt;!--dao层包下的类的日志输出--&gt; &lt;logger name=&quot;$&#123;mapper.package&#125;&quot; additivity=&quot;false&quot; level=&quot;DEBUG&quot;&gt; &lt;appender-ref ref=&quot;app&quot;/&gt; &lt;appender-ref ref=&quot;ERROR&quot;/&gt; &lt;!--打印控制台--&gt; &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt; &lt;/logger&gt; &lt;!-- root级别 DEBUG --&gt; &lt;root&gt; &lt;!-- 打印debug级别日志及以上级别日志 --&gt; &lt;level value=&quot;$&#123;log.level&#125;&quot;/&gt; &lt;!-- 控制台输出 --&gt; &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt; &lt;!-- 不管什么包下的日志都输出文件 --&gt; &lt;appender-ref ref=&quot;ERROR&quot;/&gt; &lt;appender-ref ref=&quot;INFO&quot;/&gt; &lt;appender-ref ref=&quot;WARN&quot;/&gt; &lt;appender-ref ref=&quot;DEBUG&quot;/&gt; &lt;appender-ref ref=&quot;TRACE&quot;/&gt; &lt;/root&gt;&lt;/configuration&gt; 7、后台数据分页查询需要mybatis-plus的分页插件 在common项目下的config目录下 123456789101112131415161718@Configurationpublic class MybatisPlusConfig &#123; /** * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除) */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() &#123; MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.H2)); return interceptor; &#125; @Bean public ConfigurationCustomizer configurationCustomizer() &#123; return configuration -&gt; configuration.setUseDeprecatedExecutor(false); &#125;&#125; 分页查询的controller 12345678910@GetMapping(&quot;/findUserList&quot;) public Result findUserList(@RequestParam(defaultValue = &quot;1&quot;)Integer current, @RequestParam(defaultValue = &quot;7&quot;)Integer size)&#123;// 对用户分页，泛型中注入的是用户实体类 Page&lt;User&gt; page = new Page&lt;&gt;(current,size); Page&lt;User&gt; userPage = userService.page(page); long total = userPage.getTotal(); List&lt;User&gt; records = userPage.getRecords(); return Result.ok().data(&quot;total&quot;,total).data(&quot;records&quot;,records); &#125;; 8、使用axios请求后台接口引入axios npm install axios 在前端项目中新建一个utils包 request.js 12345678import axios from &#x27;axios&#x27;const instance = axios.create(&#123; baseURL: &#x27;http://localhost:8081&#x27;, timeout: 3000, &#125;); export default instance 新建api包 users.js 12345678910import request from &#x27;../utils/request&#x27;// 后面每次请求都是携带token的export const findUserList =()=&gt;&#123; return request(&#123; url: &quot;/user/findUserList&quot;, method: &#x27;get&#x27;, &#125;)&#125; 在Uses.vue组件中 添加获取用户列表的方法,并在控制台打印 1234async getUserList()&#123; const &#123;data&#125; = await findUserList() console.log(data); &#125; 钩子函数加载 123created()&#123; this.getUserList(); &#125;, 9、跨域问题 Access-Control-Allow-Origin 9.1、nginx反向代理解决跨域9.2、jsonp解决跨域（axios不支持）9.3、springboot的@CrossOrign9.4、配置webmvcconfigure解决跨域123456789101112131415@Configurationpublic class CrosConfig implements WebMvcConfigurer &#123; /** * * @param registry */ @Override public void addCorsMappings(CorsRegistry registry) &#123; registry.addMapping(&quot;/**&quot;).allowedOrigins(&quot;*&quot;) .allowedMethods(&quot;GET&quot;,&quot;POST&quot;,&quot;PUT&quot;,&quot;OPTIONS&quot;,&quot;HEAD&quot;) .allowCredentials(true) .maxAge(3600) .allowedHeaders(&quot;*&quot;); &#125;&#125; 10、用户数据绑定及分页展示11、mybatisplus实现多表联查（用户部门）12、编写添加用户界面13、实现头像上传阿里云的OSS 需要joda-time依赖 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475 //获取上传的文件流 InputStream inputStream = file.getInputStream();// 保证文件名不相同 uuid redis分布式ID 雪花算法 方便区分 文件格式 yyyy/MM/dd+uuid// 构建日期文件夹的路径 avatar/2022/5/14 文件名 String datePath = new DateTime().toString(&quot;yyyy/MM/dd&quot;);// 获取文件的名称 String original = file.getOriginalFilename();// 获取uuid String fileName = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;/&quot;);// 获得文件上传的扩展名 .jpg String fileType = original.substring(original.lastIndexOf(&quot;.&quot;));// 拼接文件名称 cfbf6d34d3e4465386f0e33d4595d52b.jpg String newName = fileName + fileType;// 生成文件夹 avatar/2022/5/14 + cfbf6d34d3e4465386f0e33d4595d52b.jpg fileName = datePath + &quot;/&quot; + newName;// 上传文件 ossClient.putObject(bucketName, fileName,inputStream); //默认十年不过期 Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10); //bucket名称 文件名 过期时间 uploadUrl = ossClient.generatePresignedUrl(bucketName, fileName, expiration).toString(); //获取url地址 //uploadUrl = &quot;https://&quot; + bucketName + &quot;.&quot; + endPoint + &quot;/&quot; + fileName; return uploadUrl.substring(0, uploadUrl.indexOf(&quot;?&quot;)); 不能直接返回uploadUrl 需要去除？后面的签名信息 /** * Description: 判断OSS服务文件上传时文件的contentType * * @param FilenameExtension 文件后缀 * @return String */ public static String getcontentType(String FilenameExtension) &#123; if (FilenameExtension.equalsIgnoreCase(&quot;.bmp&quot;)) &#123; return &quot;image/bmp&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.gif&quot;)) &#123; return &quot;image/gif&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.jpeg&quot;) || FilenameExtension.equalsIgnoreCase(&quot;.jpg&quot;) || FilenameExtension.equalsIgnoreCase(&quot;.png&quot;)) &#123; return &quot;image/jpg&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.html&quot;)) &#123; return &quot;text/html&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.txt&quot;)) &#123; return &quot;text/plain&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.vsd&quot;)) &#123; return &quot;application/vnd.visio&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.pptx&quot;) || FilenameExtension.equalsIgnoreCase(&quot;.ppt&quot;)) &#123; return &quot;application/vnd.ms-powerpoint&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.docx&quot;) || FilenameExtension.equalsIgnoreCase(&quot;.doc&quot;)) &#123; return &quot;application/msword&quot;; &#125; if (FilenameExtension.equalsIgnoreCase(&quot;.xml&quot;)) &#123; return &quot;text/xml&quot;; &#125; return &quot;image/jpg&quot;; &#125;","categories":[],"tags":[]},{"title":"项目-前端","slug":"5-5/项目_前端","date":"2022-05-05T13:24:25.055Z","updated":"2022-05-09T05:28:05.769Z","comments":true,"path":"2022/05/05/5-5/项目_前端/","link":"","permalink":"https://dddwah11.github.io/2022/05/05/5-5/%E9%A1%B9%E7%9B%AE_%E5%89%8D%E7%AB%AF/","excerpt":"","text":"搭好前端脚手架router,vuex,elementpuls, 配置全局样式css文件下 123456/* 全局样式表 */html,body，#app&#123; height: 100%; margin: 0; padding: 0;&#125; main.js下 1import &#x27;@/assets/css/global.css&#x27; 1、登录页面使用less 安装 1npm install --save-dev less-loader less 1&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt; vue3使用图标需要全局注册组件 1npm install @element-plus/icons-vue main.js中 1234import * as ElementPlusIconsVue from &#x27;@element-plus/icons-vue&#x27;for (const [key, component] of Object.entries(ElementPlusIconsVue)) &#123; app.component(key, component)&#125; 直接引用 使用icon的方法 1import &#123; Avatar, Lock &#125; from &quot;@element-plus/icons-vue&quot;; 123456setup()&#123; return &#123; Avatar, Lock &#125; &#125; 输入框中引用 12账号 prefix-icon=&quot;Avatar&quot;密码 prefix-icon=&quot;Lock&quot; login.vue登录页面 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157&lt;template&gt; &lt;!-- 登录容器 --&gt; &lt;div class=&quot;login_container&quot;&gt; &lt;!-- 登录区域 --&gt; &lt;div class=&quot;login_box&quot;&gt; &lt;!-- 头像 --&gt; &lt;div class=&quot;avatar_box&quot;&gt; &lt;img src=&quot;@/assets/src.jpeg&quot; /&gt; &lt;/div&gt; &lt;!-- 表单 --&gt; &lt;el-form :model=&quot;loginForm&quot; :rules=&quot;loginrules&quot; ref=&quot;loginForm&quot; label-width=&quot;0px&quot; class=&quot;login_form&quot; &gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;loginForm.username&quot; prefix-icon=&quot;Avatar&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;loginForm.password&quot; prefix-icon=&quot;Lock&quot; type=&quot;password&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;verifyCode&quot;&gt; &lt;el-input v-model=&quot;loginForm.verifyCode&quot; prefix-icon=&quot;Iphone&quot; class=&quot;verify_code&quot; &gt;&lt;/el-input&gt; &lt;img src=&quot;@/assets/msFvb6.gif&quot; class=&quot;verify_img&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item class=&quot;login_btn&quot;&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;loginForm&#x27;)&quot; &gt;登录&lt;/el-button &gt; &lt;el-button @click=&quot;resetForm(&#x27;loginForm&#x27;)&quot;&gt;重置&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; Avatar, Lock, Iphone &#125; from &quot;@element-plus/icons-vue&quot;;export default &#123; setup() &#123; return &#123; Avatar, Lock, Iphone, &#125;; &#125;, data() &#123; return &#123; loginForm: &#123; username: &quot;&quot;, password: &quot;&quot;, verifyCode: &quot;&quot;, &#125;, loginrules: &#123; username: [ &#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;, &#123; min: 3, max: 16, message: &quot;长度在 3 到 16 个字符&quot;, trigger: &quot;blur&quot;, &#125;, ], password: [ &#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;, &#123; min: 3, max: 16, message: &quot;长度在 3 到 16 个字符&quot;, trigger: &quot;blur&quot;, &#125;, ], verifyCode: [ &#123; required: true, message: &quot;请输入验证码&quot;, trigger: &quot;blur&quot; &#125;, &#123; min: 3, max: 16, trigger: &quot;blur&quot;, &#125;, ], &#125;, &#125;; &#125;, methods: &#123; submitForm(formName) &#123; this.$refs[formName].validate((valid) =&gt; &#123; if (valid) &#123; alert(&quot;submit!&quot;); &#125; else &#123; console.log(&quot;error submit!!&quot;); return false; &#125; &#125;); &#125;, resetForm(formName) &#123; this.$refs[formName].resetFields(); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style lang=&#x27;less&#x27; scoped&gt;.login_container &#123; height: 100%; background-color: aquamarine;&#125;.login_box &#123; width: 450px; height: 380px; background-color: #ffffff; border-radius: 3px; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); .avatar_box &#123; width: 130px; height: 130px; border: 1px solid #eeeeee; border-radius: 50%; padding: 10px; box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1); margin: -65px auto; background: #ffffff; img &#123; width: 100%; height: 100%; border-radius: 50%; background-color: #eeeeee; &#125; &#125; .login_form &#123; position: absolute; bottom: 0px; width: 100%; &#125; .login_btn &#123; display: flex; justify-content: flex-end; &#125; .verify_code &#123; width: 60%; &#125;&#125;&lt;/style&gt; 2、Main页面鼠标放上图片拉下菜单 123456.el-dropdown-menu,img&#123; height: 60px; width: 60px; border-radius: 50%; &#125; 1234567891011&lt;el-dropdown&gt; &lt;!-- 右边头像 --&gt; &lt;img src=&quot;@/assets/src.jpeg&quot; /&gt; &lt;!-- 下拉菜单 --&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu&gt; &lt;el-dropdown-item icon=&quot;HomeFilled&quot;&gt;系统主页&lt;/el-dropdown-item&gt; &lt;el-dropdown-item icon=&quot;Warning&quot;&gt;退出登录&lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; 注意：去除侧边栏展开多出的边缘， 123.el-menu-vertical-demo&#123; border-right: none;&#125; Main.vue页面 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429&lt;template&gt; &lt;el-container class=&quot;main_container&quot;&gt; &lt;el-header&gt; &lt;div class=&quot;left_box&quot;&gt; &lt;!-- 左边头像 --&gt; &lt;img src=&quot;@/assets/src.jpeg&quot; /&gt; &lt;span&gt;系统&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;right_box&quot;&gt; &lt;el-dropdown&gt; &lt;!-- 右边头像 --&gt; &lt;img src=&quot;@/assets/src.jpeg&quot; /&gt; &lt;!-- 下拉菜单 --&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu&gt; &lt;el-dropdown-item icon=&quot;HomeFilled&quot;&gt;系统主页&lt;/el-dropdown-item&gt; &lt;el-dropdown-item icon=&quot;Warning&quot;&gt;退出登录&lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; &lt;/div&gt; &lt;/el-header&gt; &lt;el-container&gt; &lt;!-- 侧边栏 --&gt; &lt;el-aside :width=&quot;iscollapse?&#x27;60px&#x27;:&#x27;200px&#x27;&quot;&gt; &lt;!-- 展开收起 --&gt; &lt;div class=&quot;toggle_box&quot; @click=&quot;toggleiscollapse&quot;&gt;|||&lt;/div&gt; &lt;el-menu active-text-color=&quot;#ffd04b&quot; background-color=&quot;#001529&quot; class=&quot;el-menu-vertical-demo&quot; :collapse=&quot;iscollapse&quot; :collapse-transition=&quot;iscollapsetransition&quot; :router=&quot;true&quot; default-active=&quot;2&quot; text-color=&quot;#fff&quot; @open=&quot;handleOpen&quot; @close=&quot;handleClose&quot; &gt; &lt;MenuTree :menuList=&quot;this.MenuList&quot;&gt;&lt;/MenuTree&gt; &lt;/el-menu&gt; &lt;/el-aside&gt; &lt;el-main&gt; &lt;router-view/&gt; &lt;/el-main&gt; &lt;/el-container&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;import MenuTree from &#x27;@/components/MenuTree.vue&#x27;export default &#123; name: &quot;Main&quot;, data() &#123; return &#123; iscollapse: false, iscollapsetransition: false, MenuList: [ &#123; &quot;id&quot;: 1, &quot;parentId&quot;: 0, &quot;menuName&quot;: &quot;系统管理&quot;, &quot;url&quot;: &quot;&quot;, &quot;icon&quot;: &quot;el-icon-setting&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 1, &quot;disabled&quot;: false, &quot;perms&quot;: null, &quot;type&quot;: 0, &quot;children&quot;: [ &#123; &quot;id&quot;: 253, &quot;parentId&quot;: 1, &quot;menuName&quot;: &quot;欢迎页面&quot;, &quot;url&quot;: &quot;/welcome&quot;, &quot;icon&quot;: &quot;el-icon-star-off&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;welcome:view&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 226, &quot;parentId&quot;: 1, &quot;menuName&quot;: &quot;用户管理&quot;, &quot;url&quot;: &quot;/users&quot;, &quot;icon&quot;: &quot;el-icon-user&quot;, &quot;orderNum&quot;: 2, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;users&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 321, &quot;parentId&quot;: 1, &quot;menuName&quot;: &quot;附件管理&quot;, &quot;url&quot;: &quot;/attachments&quot;, &quot;icon&quot;: &quot;el-icon-picture-outline&quot;, &quot;orderNum&quot;: 2, &quot;open&quot;: 1, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 4, &quot;parentId&quot;: 1, &quot;menuName&quot;: &quot;菜单权限&quot;, &quot;url&quot;: &quot;/menus&quot;, &quot;icon&quot;: &quot;el-icon-help&quot;, &quot;orderNum&quot;: 3, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: null, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 235, &quot;parentId&quot;: 1, &quot;menuName&quot;: &quot;角色管理&quot;, &quot;url&quot;: &quot;/roles&quot;, &quot;icon&quot;: &quot;el-icon-postcard&quot;, &quot;orderNum&quot;: 3, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 261, &quot;parentId&quot;: 1, &quot;menuName&quot;: &quot;部门管理&quot;, &quot;url&quot;: &quot;/departments&quot;, &quot;icon&quot;: &quot;el-icon-s-home&quot;, &quot;orderNum&quot;: 3, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 319, &quot;parentId&quot;: 1, &quot;menuName&quot;: &quot;公告管理&quot;, &quot;url&quot;: &quot;/notices&quot;, &quot;icon&quot;: &quot;el-icon-s-flag&quot;, &quot;orderNum&quot;: 4, &quot;open&quot;: 0, &quot;disabled&quot;: true, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125; ] &#125;, &#123; &quot;id&quot;: 303, &quot;parentId&quot;: 0, &quot;menuName&quot;: &quot;健康报备&quot;, &quot;url&quot;: &quot;&quot;, &quot;icon&quot;: &quot;el-icon-platform-eleme&quot;, &quot;orderNum&quot;: 3, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [ &#123; &quot;id&quot;: 273, &quot;parentId&quot;: 303, &quot;menuName&quot;: &quot;全国疫情&quot;, &quot;url&quot;: &quot;/map&quot;, &quot;icon&quot;: &quot;el-icon-s-opportunity&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 1, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;map:view&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 304, &quot;parentId&quot;: 303, &quot;menuName&quot;: &quot;健康打卡&quot;, &quot;url&quot;: &quot;/health&quot;, &quot;icon&quot;: &quot;el-icon-s-cooperation&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 305, &quot;parentId&quot;: 303, &quot;menuName&quot;: &quot;查看情况&quot;, &quot;url&quot;: null, &quot;icon&quot;: &quot;el-icon-c-scale-to-original&quot;, &quot;orderNum&quot;: 2, &quot;open&quot;: 1, &quot;disabled&quot;: false, &quot;perms&quot;: null, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 272, &quot;parentId&quot;: 303, &quot;menuName&quot;: &quot;疫情辟谣&quot;, &quot;url&quot;: &quot;/rumors&quot;, &quot;icon&quot;: &quot;el-icon-help&quot;, &quot;orderNum&quot;: 5, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: null, &quot;type&quot;: 0, &quot;children&quot;: [] &#125; ] &#125;, &#123; &quot;id&quot;: 295, &quot;parentId&quot;: 0, &quot;menuName&quot;: &quot;其他管理&quot;, &quot;url&quot;: &quot;&quot;, &quot;icon&quot;: &quot;el-icon-s-marketing&quot;, &quot;orderNum&quot;: 5, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [ &#123; &quot;id&quot;: 297, &quot;parentId&quot;: 295, &quot;menuName&quot;: &quot;监控管理&quot;, &quot;url&quot;: &quot;&quot;, &quot;icon&quot;: &quot;el-icon-warning&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [ &#123; &quot;id&quot;: 298, &quot;parentId&quot;: 297, &quot;menuName&quot;: &quot;SQL监控&quot;, &quot;url&quot;: &quot;/druid&quot;, &quot;icon&quot;: &quot;el-icon-view&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: null, &quot;type&quot;: 0, &quot;children&quot;: [] &#125; ] &#125;, &#123; &quot;id&quot;: 341, &quot;parentId&quot;: 295, &quot;menuName&quot;: &quot;个人博客&quot;, &quot;url&quot;: &quot;/blog&quot;, &quot;icon&quot;: &quot;el-icon-view&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 296, &quot;parentId&quot;: 295, &quot;menuName&quot;: &quot;swagger文档&quot;, &quot;url&quot;: &quot;/swagger&quot;, &quot;icon&quot;: &quot;el-icon-document&quot;, &quot;orderNum&quot;: 2, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: null, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 318, &quot;parentId&quot;: 295, &quot;menuName&quot;: &quot;图标管理&quot;, &quot;url&quot;: &quot;/icons&quot;, &quot;icon&quot;: &quot;el-icon-star-off&quot;, &quot;orderNum&quot;: 2, &quot;open&quot;: 1, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125; ] &#125;, &#123; &quot;id&quot;: 5, &quot;parentId&quot;: 0, &quot;menuName&quot;: &quot;日志管理&quot;, &quot;url&quot;: &quot;/logs&quot;, &quot;icon&quot;: &quot;el-icon-camera&quot;, &quot;orderNum&quot;: 6, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: null, &quot;type&quot;: 0, &quot;children&quot;: [ &#123; &quot;id&quot;: 271, &quot;parentId&quot;: 5, &quot;menuName&quot;: &quot;登入日志&quot;, &quot;url&quot;: &quot;/loginLog&quot;, &quot;icon&quot;: &quot;el-icon-date&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 0, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;login:log&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125;, &#123; &quot;id&quot;: 307, &quot;parentId&quot;: 5, &quot;menuName&quot;: &quot;操作日志&quot;, &quot;url&quot;: &quot;/logs&quot;, &quot;icon&quot;: &quot;el-icon-edit&quot;, &quot;orderNum&quot;: 1, &quot;open&quot;: 1, &quot;disabled&quot;: false, &quot;perms&quot;: &quot;&quot;, &quot;type&quot;: 0, &quot;children&quot;: [] &#125; ] &#125; ] &#125;; &#125;, methods: &#123; toggleiscollapse() &#123; this.iscollapse = !this.iscollapse; &#125;, &#125;, components: &#123; MenuTree,&#125;,&#125;;&lt;/script&gt;&lt;style lang=&#x27;less&#x27; scoped&gt;// 头部布局.el-header &#123; background-color: #001529; display: flex; justify-content: space-between; padding-left: 0; color: #ffffff; align-items: center; font-size: 20px; // 左边头像样式 .left_box &#123; display: flex; align-items: center; //文本居中 img &#123; width: 60px; height: 60px; margin: 0px 0px 10px 15px; //边缘 &#125; // 文本 span &#123; margin-left: 15px; &#125; &#125; // 右边头像样式 .right_box &#123; .el-dropdown-menu, img &#123; height: 60px; width: 60px; border-radius: 50%; background-size: contain; //容器包裹头像 &#125; &#125;&#125;// 侧边栏.el-aside &#123; background-color: #001529; .el-menu-vertical-demo&#123; border-right: none; &#125; // 收起功能样式 .toggle_box &#123; background-color: #001529; color: #FFFFFF; text-align: center; cursor: pointer; font-size: 15px; font-weight: bold; line-height: 24px; &#125;&#125;// 主体布局.el-main &#123; background-color: #e9eef3;&#125;// 整个容器高度.main_container &#123; height: 100%;&#125;&lt;/style&gt; 2.1、MenuTree.vue组件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;template &gt; &lt;div&gt; &lt;template v-for=&quot;item in this.menuList&quot;&gt; &lt;el-sub-menu :disabled=&quot;item.disabled&quot; :index=&quot;item.id + &#x27;&#x27;&quot; :key=&quot;item.id + &#x27;&#x27;&quot; v-if=&quot;item.children.length &gt; 0&quot; &gt; &lt;template #title&gt; &lt;el-icon class=&quot;is-loading&quot;&gt; &lt;loading /&gt; &lt;/el-icon&gt; &lt;span&gt;&#123;&#123; item.menuName &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;MenuTree :menuList=&quot;item.children&quot;&gt;&lt;/MenuTree&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item v-else :disabled=&quot;item.disabled&quot; :index=&quot;item.url+&#x27;&#x27;&quot; :router=&quot;true&quot; :key=&quot;item.id+&#x27;&#x27;&quot;&gt; &lt;el-icon class=&quot;is-loading&quot;&gt; &lt;loading /&gt; &lt;/el-icon&gt; &lt;span&gt;&#123;&#123; item.menuName &#125;&#125;&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/template&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;MenuTree&quot;, props: [&quot;menuList&quot;],&#125;;&lt;/script&gt;&lt;style &gt;/* 溢出效果解决 */ .el-menu--collapse span, .el-menu--collapse i.el-sub-menu__icon-arrow&#123; height: 0; width: 0; overflow: hidden; visibility: hidden; display: inline-block; &#125;&lt;/style&gt; 3、用户管理界面4、用户数据绑定及分页展示5、前端绑定部门信息6、用户列表查询","categories":[],"tags":[]},{"title":"json","slug":"5-5/json","date":"2022-05-05T09:20:58.486Z","updated":"2022-05-05T10:08:28.422Z","comments":true,"path":"2022/05/05/5-5/json/","link":"","permalink":"https://dddwah11.github.io/2022/05/05/5-5/json/","excerpt":"","text":"Jackson导入依赖 123456&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.13.2.2&lt;/version&gt; &lt;type&gt;bundle&lt;/type&gt;&lt;/dependency&gt; Fastjson12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;2.0.2.graal&lt;/version&gt;&lt;/dependency&gt;","categories":[],"tags":[]},{"title":"","slug":"5-5/vue实现粒子效果","date":"2022-05-05T07:36:13.580Z","updated":"2022-05-05T09:20:21.194Z","comments":true,"path":"2022/05/05/5-5/vue实现粒子效果/","link":"","permalink":"https://dddwah11.github.io/2022/05/05/5-5/vue%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C/","excerpt":"","text":"Vue-particles1npm install vue-particles --save-dev mai.js中 123import Vue from &#x27;vue&#x27;import VueParticles from &#x27;vue-particles&#x27;Vue.use(VueParticles) 组件中 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div &gt; &lt;vue-particles class=&quot;login-background&quot; color=&quot;#97D0F2&quot; :particleOpacity=&quot;0.7&quot; :particlesNumber=&quot;80&quot; shapeType=&quot;circle&quot; :particleSize=&quot;4&quot; linesColor=&quot;#dedede&quot; :linesWidth=&quot;1&quot; :lineLinked=&quot;true&quot; :lineOpacity=&quot;0.4&quot; :linesDistance=&quot;150&quot; :moveSpeed=&quot;3&quot; :hoverEffect=&quot;true&quot; hoverMode=&quot;grab&quot; :clickEffect=&quot;true&quot; clickMode=&quot;push&quot; &gt; &lt;/vue-particles&gt; &lt;/div&gt; &lt;/template&gt;&lt;style scoped&gt;.login-background &#123; position: relative; &#125;&lt;/style&gt;","categories":[],"tags":[]},{"title":"Element-plus","slug":"5-1/Element-plus","date":"2022-05-01T13:50:54.423Z","updated":"2022-05-05T03:59:34.486Z","comments":true,"path":"2022/05/01/5-1/Element-plus/","link":"","permalink":"https://dddwah11.github.io/2022/05/01/5-1/Element-plus/","excerpt":"","text":"Element-plus安装： 1npm install element-plus --save main.js需导入两个文件 123456789import &#123; createApp &#125; from &#x27;vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/dist/index.css&#x27;import App from &#x27;./App.vue&#x27;const app = createApp(App)app.use(ElementPlus)app.mount(&#x27;#app&#x27;) 例子： 使用选项式的API DatePicker 日期选择器 APP.vue中： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;template&gt; &lt;div&gt; &lt;el-date-picker v-model=&quot;value1&quot; type=&quot;date&quot; placeholder=&quot;Pick a day&quot; :disabled-date=&quot;disabledDate&quot; :shortcuts=&quot;shortcuts&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data() &#123; return &#123; value1: &quot;&quot;, shortcuts: [ &#123; text: &quot;Today&quot;, value: new Date(), &#125;, &#123; text: &quot;Yesterday&quot;, value: () =&gt; &#123; const date = new Date(); date.setTime(date.getTime() - 3600 * 1000 * 24); return date; &#125;, &#125;, &#123; text: &quot;A week ago&quot;, value: () =&gt; &#123; const date = new Date(); date.setTime(date.getTime() - 3600 * 1000 * 24 * 7); return date; &#125;, &#125;, ], &#125;; &#125;, methods: &#123; disabledDate: (time) =&gt; &#123; return time.getTime() &gt; Date.now(); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style &gt;&lt;/style&gt; 组合式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;template&gt; &lt;div&gt; &lt;el-date-picker v-model=&quot;value&quot; type=&quot;date&quot; placeholder=&quot;选一天吧&quot; :disabled-date=&quot;disabledDate&quot; :shortcuts=&quot;shortcuts&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref &#125; from &#x27;vue&#x27;export default &#123; name: &quot;App&quot;, setup() &#123; const value = ref(&quot;&quot;); const shortcuts = [ &#123; text: &quot;Today&quot;, value: new Date(), &#125;, &#123; text: &quot;Yesterday&quot;, value: () =&gt; &#123; const date = new Date(); date.setTime(date.getTime() - 3600 * 1000 * 24); return date; &#125;, &#125;, &#123; text: &quot;A week ago&quot;, value: () =&gt; &#123; const date = new Date(); date.setTime(date.getTime() - 3600 * 1000 * 24 * 7); return date; &#125;, &#125;, ]; const disabledDate = (time) =&gt; &#123; return time.getTime() &gt; Date.now(); &#125;; return &#123;value,shortcuts,disabledDate&#125;; &#125;, methods: &#123; // disabledDate: (time) =&gt; &#123; // return time.getTime() &gt; Date.now(); // &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style &gt;&lt;/style&gt; 组合式API1234&lt;template&gt;this is home &#123;&#123; count &#125;&#125;&lt;/template&gt;&lt;script lang=&quot;ts&quot; setup&gt;let count = ref(2);&lt;/script&gt; 组合式API的分离新建composables文件夹 新建datapacker.js 1234567891011121314151617181920212223242526272829import &#123; ref&#125; from &#x27;vue&#x27;export const value = ref(&quot;&quot;);export const shortcuts = [ &#123; text: &quot;Today&quot;, value: new Date(), &#125;, &#123; text: &quot;Yesterday&quot;, value: () =&gt; &#123; const date = new Date(); date.setTime(date.getTime() - 3600 * 1000 * 24); return date; &#125;, &#125;, &#123; text: &quot;A week ago&quot;, value: () =&gt; &#123; const date = new Date(); date.setTime(date.getTime() - 3600 * 1000 * 24 * 7); return date; &#125;, &#125;, ]; export const disabledDate = (time) =&gt; &#123; return time.getTime() &gt; Date.now(); &#125;; App.vue组件中 123456789101112131415161718192021222324&lt;template&gt; &lt;div&gt; &lt;el-date-picker v-model=&quot;value&quot; type=&quot;date&quot; placeholder=&quot;选一天吧&quot; :disabled-date=&quot;disabledDate&quot; :shortcuts=&quot;shortcuts&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123;value,shortcuts,disabledDate&#125; from &quot;@/composables/datepacker.js&quot;export default &#123; setup() &#123; return &#123;value,shortcuts,disabledDate&#125; &#125;,&#125;;&lt;/script&gt;&lt;style &gt;&lt;/style&gt; 完成登录页面App.vue 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;template&gt; &lt;div&gt; &lt;el-row :gutter=&quot;20&quot;&gt; &lt;el-col :span=&quot;6&quot;&gt;&lt;div class=&quot;grid-content bg-purple&quot; /&gt;&lt;/el-col&gt; &lt;el-col :span=&quot;12&quot;&gt; &lt;el-form :model=&quot;form&quot; label-width=&quot;120px&quot;&gt; &lt;el-form-item label=&quot;用户名&quot;&gt; &lt;el-input v-model=&quot;user.username&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot;&gt; &lt;el-input v-model=&quot;user.password&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/el-col&gt; &lt;el-col :span=&quot;6&quot;&gt;&lt;div class=&quot;grid-content bg-purple&quot; /&gt;&lt;/el-col&gt; &lt;/el-row&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;login&#x27;, data () &#123; return &#123; user: &#123; username:&#x27;&#x27;, password:&#x27;&#x27; &#125; &#125;; &#125;, methods: &#123; login()&#123; if(this.user.username === &#x27;root&#x27;)&#123; ElMessageBox.alert(&#x27;登录成功&#x27;, &#x27;消息&#x27;); // this.$router.push(&quot;/main&quot;); &#125; &#125; &#125;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 完善登录页面","categories":[],"tags":[]},{"title":"vue3","slug":"4-26/vue3","date":"2022-04-26T10:44:31.729Z","updated":"2022-05-05T14:49:13.264Z","comments":true,"path":"2022/04/26/4-26/vue3/","link":"","permalink":"https://dddwah11.github.io/2022/04/26/4-26/vue3/","excerpt":"","text":"vue cli脚手架1npm install -g @vue/cli 创建一个vue项目1vue create project-name 项目结构main.js123456import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;// 根组件createApp(App).mount(&#x27;#app&#x27;) main.js 会创建我们vue的实例，挂载会帮我们创建根组件的实例vm APP.vue123456789101112131415161718192021222324252627&lt;template&gt; &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt; &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;export default &#123; name: &#x27;App&#x27;, components: &#123; HelloWorld &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; webpackViteVite 是一个 web 开发构建工具，由于其原生 ES 模块导入方式，可以实现闪电般的冷服务器启动。 通过在终端中运行以下命令，可以使用 Vite 快速构建 Vue 项目。 使用 npm： 123456789# npm 6.x$ npm init vite@latest &lt;project-name&gt; --template vue# npm 7+，需要加上额外的双短横线$ npm init vite@latest &lt;project-name&gt; -- --template vue$ cd &lt;project-name&gt;$ npm install$ npm run serve/dev 安装依赖 123456789npm install安装vue-routernpm install vue-router@4安装element-uinpm install --legacy-peer-deps element-ui --save安装 SASS 加载器cnpm install sass-loader node-sass --save-dev启动测试npm run serve/dev 创建modules目录 在文件目录下 运行 webpack 创建index.html并引入 1&lt;script src =&quot;dist/js/bundle.js&quot;&gt;&lt;/script&gt; axios1npm add axois 1234567import axios from &#x27;axios&#x27;;mounted()&#123; getData()&#123; axios.get(&quot;xxx&quot;).then(res =&gt;&#123; &#125;) &#125; vue_router安装vue-router到项目目录 1npm install vue-router@4 -s/安装在本地项目，在packge.json中 use(router)； 使用cdn 12345678910111213141516&lt;script src=&quot;https://unpkg.com/vue@3&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/vue-router@4&quot;&gt;&lt;/script&gt;&lt;div id=&quot;app&quot;&gt; &lt;h1&gt;Hello App!&lt;/h1&gt; &lt;p&gt; &lt;!-- use the router-link component for navigation. --&gt; &lt;!-- specify the link by passing the `to` prop. --&gt; &lt;!-- `&lt;router-link&gt;` will render an `&lt;a&gt;` tag with the correct `href` attribute --&gt; &lt;router-link to=&quot;/&quot;&gt;Go to Home&lt;/router-link&gt; &lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt; &lt;/p&gt; &lt;!-- route outlet --&gt; &lt;!-- component matched by the route will render here --&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt; 在Vue脚手架当中 main.js中 1234567891011121314151617181920212223242526import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import &#123; createRouter, createWebHashHistory&#125; from &#x27;vue-router&#x27; //从vue-router中解构 花括号中的两个方法import Hhome from &#x27;./components/Hhome.vue&#x27;import Ahbout from &#x27;./components/Ahbout.vue&#x27;// 2. 定义一些路由// 每个路由都需要映射到一个组件。// 我们后面再讨论嵌套路由。const routes = [ &#123; path: &#x27;/&#x27;, component: Hhome &#125;, &#123; path: &#x27;/about&#x27;, component: Ahbout &#125;,]// 3. 创建路由实例并传递 `routes` 配置// 你可以在这里输入更多的配置，但我们在这里// 暂时保持简单const router = createRouter(&#123; // 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。 history: createWebHashHistory(), routes, // `routes: routes` 的缩写&#125;)// 根组件let app = createApp(App).use(router);app.mount(&#x27;#app&#x27;) APP.vue中 1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; /&gt; &lt;h1&gt;Hello App!&lt;/h1&gt; &lt;p&gt; &lt;!-- use the router-link component for navigation. --&gt; &lt;!-- specify the link by passing the `to` prop. --&gt; &lt;!-- `&lt;router-link&gt;` will render an `&lt;a&gt;` tag with the correct `href` attribute --&gt; &lt;router-link to=&quot;/&quot;&gt;Go to Home&lt;/router-link&gt; &lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt; &lt;/p&gt; &lt;!-- route outlet --&gt; &lt;!-- component matched by the route will render here --&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/template&gt;&lt;script&gt;import home from &quot;./components/Hhome.vue&quot;;import about from &quot;./components/Ahbout.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; home, about &#125;,&#125;;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; 代码改造 解决路由过多 新建router目录，在其下新建index.js改造代码 1234567891011121314151617181920212223//完成路由相关的工作import &#123; createRouter, createWebHashHistory&#125; from &#x27;vue-router&#x27; //从vue-router中解构 花括号中的两个方法import Hhome from &#x27;../components/Hhome.vue&#x27;import Ahbout from &#x27;../components/Ahbout.vue&#x27;// 2. 定义一些路由// 每个路由都需要映射到一个组件。// 我们后面再讨论嵌套路由。const routes = [ &#123; path: &#x27;/&#x27;, component: Hhome &#125;, &#123; path: &#x27;/about&#x27;, component: Ahbout &#125;,]// 3. 创建路由实例并传递 `routes` 配置// 你可以在这里输入更多的配置，但我们在这里// 暂时保持简单const router = createRouter(&#123; // 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。 history: createWebHashHistory(), routes, // `routes: routes` 的缩写&#125;)//暴露一个router方法给main.jsexport default router main.js中 1234567import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router&#x27;// 根组件app.use(router); 这样分工就十分明确了！ 动态路由匹配router下的index.js 1&#123;path: &#x27;/user/:id&#x27;, component: use&#125; 通过组件传参 1&lt;div&gt;my id is &#123;&#123;$router.params.id&#125;&#125;&lt;/div&gt; 总组件中 1234&lt;template&gt;&lt;router-link to=&quot;/user/13&quot;&gt;13&lt;/router-link&gt; | &lt;router-link to=&quot;/user/12&quot;&gt;12&lt;/router-link&gt; |&lt;/template&gt; 一些语法通过自定义的正则： path: &#39;/user/:id(//d+)&#39; （&#x2F;&#x2F;d+）表示传入的参数只能是数字 可重复的参数 path: &#39;/user/:id(//d+)*&#39; 在其后面加*符号，这提供了一个参数数组，而不是字符串 可选的参数 在id后面加？ 可与可无 嵌套路由在user.vue组件中嵌套两个组件 user.vue中 123456789&lt;template&gt; &lt;div&gt; &lt;p&gt;hello&lt;/p&gt; &lt;p&gt; my id is &#123;&#123;$router.params.id&#125;&#125; &lt;/p&gt; &lt;router-link v-bind:to=&quot;&#x27;/user/&#x27;+$router.params.id+&#x27;/profile&#x27;&quot;&gt;头像&lt;/router-link&gt; &lt;router-link v-bind:to=&quot;&#x27;/user/&#x27;+$router.params.id+&#x27;/posts&#x27;&quot;&gt;岗位&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; router中的index.js中 123456789101112131415161718&#123; path: &#x27;/user/:id&#x27;, component: user, children: [ &#123; // UserProfile will be rendered inside User&#x27;s &lt;router-view&gt; // when /user/:id/profile is matched path: &#x27;profile&#x27;, component: UserProfile, &#125;, &#123; // UserPosts will be rendered inside User&#x27;s &lt;router-view&gt; // when /user/:id/posts is matched path: &#x27;posts&#x27;, component: UserPosts, &#125;, ] &#125; 命名路线除了path，您还可以提供name任何路线。这具有以下优点： 没有硬编码的 URL 自动编码&#x2F;解码params 防止您在网址中出现拼写错误 绕过路径排名（例如显示 a ） 1234567const routes = [ &#123; path: &#x27;/user/:username&#x27;, name: &#x27;user&#x27;, component: User &#125;] 要链接到命名路由，您可以将对象传递给router-link组件的toprop： 123&lt;router-link :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;&#125;&quot;&gt; User&lt;/router-link&gt; 命名视图有时您需要同时显示多个视图而不是嵌套它们，例如创建一个带有sidebar视图和main视图的布局。这就是命名视图派上用场的地方。您可以拥有多个并为每个插座命名，而不是在您的视图中只有一个插座。没有名字的 Arouter-view将default作为它的名字。 123&lt;router-view class=&quot;view left-sidebar&quot; name=&quot;LeftSidebar&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view main-content&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view right-sidebar&quot; name=&quot;RightSidebar&quot;&gt;&lt;/router-view&gt; 一个视图是使用一个组件来渲染的，因此多个视图需要多个组件用于同一条路线。确保使用components（带有s）选项： 123456789101112131415const router = createRouter(&#123; history: createWebHashHistory(), routes: [ &#123; path: &#x27;/&#x27;, components: &#123; default: Home, // short for LeftSidebar: LeftSidebar LeftSidebar, // they match the `name` attribute on `&lt;router-view&gt;` RightSidebar, &#125;, &#125;, ],&#125;) 嵌套命名视图可以使用带有嵌套视图的命名视图来创建复杂的布局。这样做时，您还需要为嵌套router-view命名。让我们以设置面板为例： 123456789/settings/emails /settings/profile+-----------------------------------+ +------------------------------+| UserSettings | | UserSettings || +-----+-------------------------+ | | +-----+--------------------+ || | Nav | UserEmailsSubscriptions | | +------------&gt; | | Nav | UserProfile | || | +-------------------------+ | | | +--------------------+ || | | | | | | | UserProfilePreview | || +-----+-------------------------+ | | +-----+--------------------+ |+-----------------------------------+ +------------------------------+ Nav只是一个常规组件 UserSettings是父视图组件 UserEmailsSubscriptions, UserProfile,UserProfilePreview是嵌套视图组件 注意：让我们忘记 HTML&#x2F;CSS 应该如何表示这种布局并关注所使用的组件。 上述布局中的组件&lt;template&gt;部分UserSettings如下所示： 1234567&lt;!-- UserSettings.vue --&gt;&lt;div&gt; &lt;h1&gt;User Settings&lt;/h1&gt; &lt;NavBar /&gt; &lt;router-view /&gt; &lt;router-view name=&quot;helper&quot; /&gt;&lt;/div&gt; 然后你可以用这个路由配置来实现上面的布局： 123456789101112131415&#123; path: &#x27;/settings&#x27;, // You could also have named views at the top component: UserSettings, children: [&#123; path: &#x27;emails&#x27;, component: UserEmailsSubscriptions &#125;, &#123; path: &#x27;profile&#x27;, components: &#123; default: UserProfile, helper: UserProfilePreview &#125; &#125;]&#125; 编程式导航除了使用 &lt;router-link&gt; 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。 导航到不同的位置 注意：在 Vue 实例中，你可以通过 $router 访问路由实例。因此你可以调用 this.$router.push。 想要导航到不同的 URL，可以使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。 当你点击 &lt;router-link&gt; 时，内部会调用这个方法，所以点击 &lt;router-link :to=&quot;...&quot;&gt; 相当于调用 router.push(...) ： 声明式 编程式 &lt;router-link :to=&quot;...&quot;&gt; router.push(...) 该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如： 1234567891011121314// 字符串路径router.push(&#x27;/users/eduardo&#x27;)// 带有路径的对象router.push(&#123; path: &#x27;/users/eduardo&#x27; &#125;)// 命名的路由，并加上参数，让路由建立 urlrouter.push(&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;eduardo&#x27; &#125; &#125;)// 带查询参数，结果是 /register?plan=privaterouter.push(&#123; path: &#x27;/register&#x27;, query: &#123; plan: &#x27;private&#x27; &#125; &#125;)// 带 hash，结果是 /about#teamrouter.push(&#123; path: &#x27;/about&#x27;, hash: &#x27;#team&#x27; &#125;) 注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path ： 123456789const username = &#x27;eduardo&#x27;// 我们可以手动建立 url，但我们必须自己处理编码router.push(`/user/$&#123;username&#125;`) // -&gt; /user/eduardo// 同样router.push(&#123; path: `/user/$&#123;username&#125;` &#125;) // -&gt; /user/eduardo// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益router.push(&#123; name: &#x27;user&#x27;, params: &#123; username &#125; &#125;) // -&gt; /user/eduardo// `params` 不能与 `path` 一起使用router.push(&#123; path: &#x27;/user&#x27;, params: &#123; username &#125; &#125;) // -&gt; /user 由于属性 to 与 router.push 接受的对象种类相同，所以两者的规则完全相同。 router.push 和所有其他导航方法都会返回一个 Promise，让我们可以等到导航完成后才知道是成功还是失败。我们将在 Navigation Handling 中详细介绍。 替换当前位置 它的作用类似于 router.push，唯一不同的是，它在导航时不会向 history 添加新记录，正如它的名字所暗示的那样——它取代了当前的条目。 声明式 编程式 &lt;router-link :to=&quot;...&quot; replace&gt; router.replace(...) 也可以直接在传递给 router.push 的 routeLocation 中增加一个属性 replace: true ： 123router.push(&#123; path: &#x27;/home&#x27;, replace: true &#125;)// 相当于router.replace(&#123; path: &#x27;/home&#x27; &#125;) 横跨历史 该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步，类似于 window.history.go(n)。 例子 123456789101112// 向前移动一条记录，与 router.forward() 相同router.go(1)// 返回一条记录，与router.back() 相同router.go(-1)// 前进 3 条记录router.go(3)// 如果没有那么多记录，静默失败router.go(-100)router.go(100) 篡改历史 你可能已经注意到，router.push、router.replace 和 router.go 是 window.history.pushState、window.history.replaceState 和 window.history.go 的翻版，它们确实模仿了 window.history 的 API。 因此，如果你已经熟悉 Browser History APIs，在使用 Vue Router 时，操作历史记录就会觉得很熟悉。 值得一提的是，无论在创建路由器实例时传递什么样的history 配置，Vue Router 的导航方法(push、replace、go)都能始终如一地工作。 重定向和别名重定向#重定向也是通过 routes 配置来完成，下面例子是从 /home 重定向到 /： 1const routes = [&#123; path: &#x27;/home&#x27;, redirect: &#x27;/&#x27; &#125;] 重定向的目标也可以是一个命名的路由： 1const routes = [&#123; path: &#x27;/home&#x27;, redirect: &#123; name: &#x27;homepage&#x27; &#125; &#125;] 甚至是一个方法，动态返回重定向目标： 123456789101112131415const routes = [ &#123; // /search/screens -&gt; /search?q=screens path: &#x27;/search/:searchText&#x27;, redirect: to =&gt; &#123; // 方法接收目标路由作为参数 // return 重定向的字符串路径/路径对象 return &#123; path: &#x27;/search&#x27;, query: &#123; q: to.params.searchText &#125; &#125; &#125;, &#125;, &#123; path: &#x27;/search&#x27;, // ... &#125;,] 请注意，**导航守卫并没有应用在跳转路由上，而仅仅应用在其目标上**。在上面的例子中，在 /home 路由中添加 beforeEnter 守卫不会有任何效果。 在写 redirect 的时候，可以省略 component 配置，因为它从来没有被直接访问过，所以没有组件要渲染。唯一的例外是嵌套路由：如果一个路由记录有 children 和 redirect 属性，它也应该有 component 属性。 相对重定向#也可以重定向到相对位置： 123456789const routes = [ &#123; path: &#x27;/users/:id/posts&#x27;, redirect: to =&gt; &#123; // 方法接收目标路由作为参数 // return 重定向的字符串路径/路径对象 &#125;, &#125;,] 别名#重定向是指当用户访问 /home 时，URL 会被 / 替换，然后匹配成 /。那么什么是别名呢？ 将 / 别名为 /home，意味着当用户访问 /home 时，URL 仍然是 /home，但会被匹配为用户正在访问 /。 上面对应的路由配置为： 1const routes = [&#123; path: &#x27;/&#x27;, component: Homepage, alias: &#x27;/home&#x27; &#125;] 通过别名，你可以自由地将 UI 结构映射到一个任意的 URL，而不受配置的嵌套结构的限制。使别名以 / 开头，以使嵌套路径中的路径成为绝对路径。你甚至可以将两者结合起来，用一个数组提供多个别名： 12345678910111213const routes = [ &#123; path: &#x27;/users&#x27;, component: UsersLayout, children: [ // 为这 3 个 URL 呈现 UserList // - /users // - /users/list // - /people &#123; path: &#x27;&#x27;, component: UserList, alias: [&#x27;/people&#x27;, &#x27;list&#x27;] &#125;, ], &#125;,] 如果你的路由有参数，请确保在任何绝对别名中包含它们： 12345678910111213const routes = [ &#123; path: &#x27;/users/:id&#x27;, component: UsersByIdLayout, children: [ // 为这 3 个 URL 呈现 UserDetails // - /users/24 // - /users/24/profile // - /24 &#123; path: &#x27;profile&#x27;, component: UserDetails, alias: [&#x27;/:id&#x27;, &#x27;&#x27;] &#125;, ], &#125;,] 路由组件传参将 props 传递给路由组件# 在你的组件中使用 $route 会与路由紧密耦合，这限制了组件的灵活性，因为它只能用于特定的 URL。虽然这不一定是件坏事，但我们可以通过 props 配置来解除这种行为： 我们可以将下面的代码 1234const User = &#123; template: &#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;&#125;const routes = [&#123; path: &#x27;/user/:id&#x27;, component: User &#125;] 替换成 12345const User = &#123; props: [&#x27;id&#x27;], template: &#x27;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&#x27;&#125;const routes = [&#123; path: &#x27;/user/:id&#x27;, component: User, props: true &#125;] 布尔模式#当 props 设置为 true 时，route.params 将被设置为组件的 props。 命名视图#对于有命名视图的路由，你必须为每个命名视图定义 props 配置： 1234567const routes = [ &#123; path: &#x27;/user/:id&#x27;, components: &#123; default: User, sidebar: Sidebar &#125;, props: &#123; default: true, sidebar: false &#125; &#125;] 对象模式#当 props 是一个对象时，它将原样设置为组件 props。当 props 是静态的时候很有用。 1234567const routes = [ &#123; path: &#x27;/promotion/from-newsletter&#x27;, component: Promotion, props: &#123; newsletterPopup: false &#125; &#125;] 函数模式#你可以创建一个返回 props 的函数。这允许你将参数转换为其他类型，将静态值与基于路由的值相结合等等。 1234567const routes = [ &#123; path: &#x27;/search&#x27;, component: SearchUser, props: route =&gt; (&#123; query: route.query.q &#125;) &#125;] URL /search?q=vue 将传递 &#123;query: &#39;vue&#39;&#125; 作为 props 传给 SearchUser 组件。 请尽可能保持 props 函数为无状态的，因为它只会在路由发生变化时起作用。如果你需要状态来定义 props，请使用包装组件，这样 vue 才可以对状态变化做出反应。 不同的历史记录模式官方推荐HTML5模式12345678import &#123; createRouter, createWebHistory &#125; from &#x27;vue-router&#x27;const router = createRouter(&#123; history: createWebHistory(), routes: [ //... ],&#125;) 当使用这种历史模式时，URL 会看起来很 “正常”，例如 https://example.com/user/id。漂亮! 不过，问题来了。由于我们的应用是一个单页的客户端应用，如果没有适当的服务器配置，用户在浏览器中直接访问 https://example.com/user/id，就会得到一个 404 错误。这就丑了。 不用担心：要解决这个问题，你需要做的就是在你的服务器上添加一个简单的回退路由。如果 URL 不匹配任何静态资源，它应提供与你的应用程序中的 index.html 相同的页面。漂亮依旧! 导航卫士动态路由VuexVuex 是一个为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用程序的所有组件的状态，并以相应的规则保证以一种状态可发生变化的方式。 安装 1npm install vuex@next --save 使用npm6再进行安装 1npx -p npm@6 npm i --legacy-peer-deps 可以定义全局使用的参数，组件都能使用 1234567891011121314// 创建一个新的 store 实例const store = createStore(&#123; // 相当于一个data，所有组件全局都能访问 state () &#123; return &#123; count: 0 &#125; &#125;, mutations: &#123; increment (state) &#123; state.count++ &#125; &#125; &#125;) 但又因为对全部组件实现了共享，就不应该放在具体的组件里 1234567// 保存了对共享数据的修改逻辑 mutations: &#123; increment (state) &#123; state.count++ &#125; &#125; &#125;) 具体方法中 123456methods: &#123; plus()&#123; // 这就是对共享变量的一个操作逻辑 this.$store.commit(&#x27;increment&#x27;); &#125; &#125; async 和awaitawait返回的是 return new promise 的函数并执行它 await只能放在async函数里 1234567891011121314151617let fun1 = function()&#123; let num = 10; return new Promise((resolve,reject)=&gt;&#123; setTimeout(()=&gt;&#123; num+=20; resolve(num); &#125;,2000) &#125;)&#125;let fun2 = async function()&#123; let num = await fun1(); console.log(num);&#125;fun2(); Statemap State函数 当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。 里面可以添加多个 1234computed: mapState([ // 映射 this.count 为 store.state.count &#x27;count&#x27;]) 可以拼接里面的对象 Getter1234567getters: &#123; // 这样可以完成复用 doneCount(state)&#123; return state.todos.filter(todo =&gt; todo.done ===true).length &#125;&#125;, 属性多了，也可以像state那样，放在计算属性中， Mutation提交载荷（Payload） Action分发action 12345actions: &#123; increment (context) &#123; context.commit(&#x27;increment&#x27;) &#125; &#125; 触发： this.$store.dispatch(&#39;increment&#39;) 模块化12345678910111213141516171819202122const moduleA = &#123; state: () =&gt; (&#123; ... &#125;), mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;const moduleB = &#123; state: () =&gt; (&#123; ... &#125;), mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;const store = createStore(&#123; modules: &#123; a: moduleA, b: moduleB &#125;&#125;)store.state.a // -&gt; moduleA 的状态store.state.b // -&gt; moduleB 的状态","categories":[],"tags":[]},{"title":"Vue","slug":"4-25/Vue","date":"2022-04-25T06:36:06.433Z","updated":"2022-04-26T10:42:19.929Z","comments":true,"path":"2022/04/25/4-25/Vue/","link":"","permalink":"https://dddwah11.github.io/2022/04/25/4-25/Vue/","excerpt":"","text":"网络通信: axios 网页跳转：vue_router 状态管理：vuex Vue-UI: ICE ElementUI、 UI框架：iview Ant-Design、Bootstrap AmazeUI、layui、vue-element-admin JavaScript构建工具： WebPack:打包、压缩、合并、按序加载 MVVM模型 view model view model 条件判断123456789101112131415161718&lt;div id=&quot;app&quot;&gt;&lt;li v-for=&quot;item in items&quot;&gt; &#123;&#123;item.message&#125;&#125;&lt;/li&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var vm = new Vue(&#123; el:&quot;#app&quot;, data: &#123; items: [ &#123;message: &#x27;xiaoliu&#x27;&#125;, &#123;message: &#x27;xiaoliuu&#x27;&#125; ] &#125; &#125;);&lt;/script&gt;&lt;/body&gt; 鼠标悬停123456789101112131415&lt;div id=&quot;app&quot;&gt; &lt;span v-bind:title=&quot;message&quot;&gt; 鼠标悬停几秒查看此处动态绑定的提示消息!&lt;/span&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var vm = new Vue(&#123; el:&quot;#app&quot;, data:&#123; message:&quot;hello,vue&quot; &#125; &#125;);&lt;/script&gt; 事件123456789101112131415&lt;div id=&quot;app&quot;&gt; &lt;button v-on:click=&quot;sayHi&quot;&gt;点我&lt;/button&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var vm = new Vue(&#123; el:&quot;#app&quot;, data: &#123;&#125;, methods: &#123; //方法必须定义在methods方法对象中 sayHi: function () &#123; alert(this.message) &#125; &#125; &#125;);&lt;/script&gt; Vue7大属性1.el属性 用来指示vue编译器从什么地方开始解析 vue的语法，可以说是一个占位符。相当于一个容器，跟上面的div id &#x3D; “app”做关联，从此以后上面div id &#x3D; “app”里面的内容要通过vue来渲染,都要经过vue处理才能看得到上面div里面的内容 2.data属性用来组织从view中抽象出来的属性，可以说将视图的数据抽象出来存放在data中。跟微信小程序一样，所有的变量都要写在data里面 3.template属性用来设置模板，会替换页面元素，包括占位符。Vue.component（）组件中会用到，其实很多地方都会用到 4.methods属性放置页面中的业务逻辑，js方法一般都放置在methods中，用来写方法，函数的computed后面会介绍computed和methods是有区别的：computed是在值发生改变的时候才会触发效果，而methods只要刷新执行了就会触发，所有平时写VUE的时候，能用computed的尽量使用 5.render属性创建真正的Virtual Dom 6.computed属性用来计算根据已经存在的属性计算出新的属性，对于同样的数据，会缓存。当其依赖属性的值发生变化是，这个属性的值会自动更新，与之相关的DOM部份也会同步自动更新。其实一般情况，我也会把一些关于逻辑的代码都写在computed中。 7.watch侦听属性watch:function(new,old){}监听data中数据的变化两个参数，一个返回新值，一个返回旧值当你有一些数据需要随着其它数据变动而变动时或者执行异步操作或开销较大操作时，建议使用watchcomputed和watch是有区别的：watch: 监视,能够监听到数据的变化,只要数据变化的时候,都会自定执行对应的方法,其中可以检测的数据来源分为三部分 data , computed , props computed: 计算属性,存在一个计算缓存的特性,每一次计算之后,只要里面的逻辑不发生变化,每一次重复调用,都会使用上一次执行的结果,能够节省计算的时间 在表单实现数据的双向绑定 12345678910111213&lt;div id=&quot;app&quot;&gt; &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;message&quot;&gt;&lt;/textarea&gt; &#123;&#123;message&#125;&#125;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var vm = new Vue(&#123; el:&quot;#app&quot;, data: &#123; message:&#x27;&#x27; &#125;, &#125;);&lt;/script&gt; 同步输入框 12345678910111213141516&lt;div id=&quot;app&quot;&gt; 性别： &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; v-model=&quot;message&quot;&gt; 男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; v-model=&quot;message&quot;&gt; 女 &lt;p&gt;选中了：&#123;&#123;message&#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var vm = new Vue(&#123; el:&quot;#app&quot;, data: &#123; message:&#x27;&#x27; &#125;, &#125;);&lt;/script&gt; 组件自定义组件获取值： 1234567891011121314151617&lt;div id=&quot;app&quot;&gt;&lt;xiaoliu v-for=&quot;item in items&quot; v-bind:item=&quot;item&quot;&gt;&lt;/xiaoliu&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; Vue.component(&quot;xiaoliu&quot;,&#123; props: [&#x27;item&#x27;], template: &#x27;&lt;h1&gt;&#123;&#123;item&#125;&#125;&lt;/h1&gt;&#x27; //模板 &#125;) var vm = new Vue(&#123; el:&quot;#app&quot;, data: &#123; message:&#x27;&#x27;, items: [&quot;xiaoliu&quot;,&quot;xiaoliuu&quot;,&quot;xiaoliuuu&quot;] &#125;, &#125;);&lt;/script&gt; Axios异步通信json数据： 12345678910111213141516171819202122232425&#123; &quot;name&quot;:&quot;狂神说java&quot;, &quot;url&quot;: &quot;http://baidu.com&quot;, &quot;page&quot;: &quot;1&quot;, &quot;isNonProfit&quot;:&quot;true&quot;, &quot;address&quot;: &#123; &quot;street&quot;: &quot;含光门&quot;, &quot;city&quot;:&quot;陕西西安&quot;, &quot;country&quot;: &quot;中国&quot; &#125;, &quot;links&quot;: [ &#123; &quot;name&quot;: &quot;B站&quot;, &quot;url&quot;: &quot;https://www.bilibili.com/&quot; &#125;, &#123; &quot;name&quot;: &quot;4399&quot;, &quot;url&quot;: &quot;https://www.4399.com/&quot; &#125;, &#123; &quot;name&quot;: &quot;百度&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot; &#125; ] 1234&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt; 123456789101112131415161718192021222324&lt;div id=&quot;vue&quot;&gt;&lt;/div&gt;&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/nmp/vue@2.5.21/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min .js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var vm = new Vue(&#123; el: &quot;#vue&quot;, data()&#123; return&#123; info:&#123; name:null, address:&#123; street:null, city: null, country: null &#125; &#125; &#125; &#125;, mounted()&#123;//钩子函数，链式编程 axios.get(&#x27;data.json&#x27;).then(response=&gt;(this.info=response.data)); &#125; &#125;);&lt;/script&gt; 解决数据闪烁问题 12345&lt;style&gt; [v-clock]&#123; display: none; &#125;&lt;/style&gt; 在head标签内，没加载数据时白屏 计算属性12345computed:&#123;//计算属性 methods computed中能重名，优先调用方法 currentTime1: function () &#123; return Date.now(); &#125;&#125; 返回的是属性 slot（插槽）12345678910111213141516171819202122232425262728293031323334353637383940&lt;div id=&quot;vue&quot;&gt; &lt;todo&gt; &lt;todo-title slot=&quot;todo-title&quot; :title=&quot;title&quot;&gt;&lt;/todo-title&gt; &lt;todo-item slot=&quot;todo-item&quot; v-for=&quot;items in item&quot; :item=&quot;items&quot;&gt;&lt;/todo-item&gt; &lt;/todo&gt;&lt;/div&gt;&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; Vue.component(&quot;todo&quot;,&#123; template: &#x27;&lt;div&gt;&#x27; + &#x27;&lt;slot name=&quot;todo-title&quot;&gt;&lt;/slot&gt;&#x27; + &#x27;&lt;ul&gt;&#x27; + &#x27;&lt;slot name=&quot;todo-item&quot;&gt;&lt;/slot&gt;&#x27; + &#x27;&lt;/ul&gt;&gt;&#x27; + &#x27;&lt;/div&gt;&#x27; &#125;); Vue.component(&quot;todo-title&quot;,&#123; props: [&#x27;title&#x27;], template: &#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27; &#125;); Vue.component(&quot;todo-item&quot;,&#123; props: [&#x27;item&#x27;], template: &#x27;&lt;div&gt;&#123;&#123;item&#125;&#125; &lt;button @click=&quot;remove&quot;&gt;删除&lt;/button&gt; &lt;/div&gt;&#x27;, methods: &#123; remove: function () &#123; alert(&quot;删除成功&quot;) &#125; &#125; &#125;); var vm = new Vue(&#123; el: &quot;#vue&quot;, data: &#123; title: &quot;xiaoliu&quot;, todo: [&#x27;效率&#x27;,&#x27;小刘&#x27;], item: [&#x27;wo&#x27;,&#x27;we&#x27;] &#125; &#125;);&lt;/script&gt; 自定义事件删除操作要在组件中完成，涉及参数传递与事件分发，可以使用this.$emit( ‘ 自定义事件名 ‘ , 参数) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;div id=&quot;vue&quot;&gt; &lt;todo&gt; &lt;todo-title slot=&quot;todo-title&quot; :title=&quot;title&quot;&gt;&lt;/todo-title&gt; &lt;todo-item slot=&quot;todo-item&quot; v-for=&quot;(items,index) in item&quot; :item=&quot;items&quot; v-bind:index=&quot;index&quot; v-on:remove=&quot;removeItem(index)&quot; :key=&quot;index&quot;&gt;&lt;/todo-item&gt; &lt;/todo&gt;&lt;/div&gt;&lt;!--导入JS文件--&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; Vue.component(&quot;todo&quot;,&#123; template: &#x27;&lt;div&gt;&#x27; + &#x27;&lt;slot name=&quot;todo-title&quot;&gt;&lt;/slot&gt;&#x27; + &#x27;&lt;ul&gt;&#x27; + &#x27;&lt;slot name=&quot;todo-item&quot;&gt;&lt;/slot&gt;&#x27; + &#x27;&lt;/ul&gt;&gt;&#x27; + &#x27;&lt;/div&gt;&#x27; &#125;); Vue.component(&quot;todo-title&quot;,&#123; props: [&#x27;title&#x27;], template: &#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27; &#125;); Vue.component(&quot;todo-item&quot;,&#123; props: [&#x27;item&#x27;,&#x27;index&#x27;], template: &#x27;&lt;div&gt;&#123;&#123;index&#125;&#125;----&#123;&#123;item&#125;&#125; &lt;button @click=&quot;remove&quot;&gt;删除&lt;/button&gt; &lt;/div&gt;&#x27;, methods: &#123; remove: function (index) &#123; this.$emit(&#x27;remove&#x27;,index); &#125; &#125; &#125;); var vm = new Vue(&#123; el: &quot;#vue&quot;, data: &#123; title: &quot;xiaoliu&quot;, todo: [&#x27;效率&#x27;,&#x27;小刘&#x27;], item: [&#x27;wo&#x27;,&#x27;we&#x27;] &#125;, methods: &#123; removeItem: function (index) &#123; console.log(&quot;shanchu&quot;+this.item[index]+&quot;ok&quot;); this.item.splice(index,1); &#125; &#125; &#125;);&lt;/script&gt;","categories":[],"tags":[]},{"title":"","slug":"4-24/微服务","date":"2022-04-24T09:58:23.676Z","updated":"2022-04-24T10:49:48.540Z","comments":true,"path":"2022/04/24/4-24/微服务/","link":"","permalink":"https://dddwah11.github.io/2022/04/24/4-24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"分布式-Dubbo-Zookeeper","slug":"4-23/分布式系统理论","date":"2022-04-23T09:00:14.508Z","updated":"2022-04-23T15:53:57.249Z","comments":true,"path":"2022/04/23/4-23/分布式系统理论/","link":"","permalink":"https://dddwah11.github.io/2022/04/23/4-23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/","excerpt":"","text":"安装zookeeper https://archive.apache.org/dist/zookeeper/zookeeper-3.7.0/ 下载编译后二进制的包 运行bin目录下的zkServer.cmd windows下 闪退解决：修改配置文件 加个暂停(pause)查看错误的原因 原因是conf目录下没有 zoo.cfg 复制sample进行添加 连接服务zkServer.cmd 连接客户端zkCli.cmd 在项目中打包dubbo-admin mvn clean package -Dmaven.test.skip=true admin的地址为7001 默认账号密码都是 root dubbo-admin是一个监控管理后台，查看我们哪些服务注册，被消费 zookeeper是 注册中心 导入依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.1&lt;/version&gt;&lt;/dependency&gt; 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt; &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.7.3&lt;/version&gt;&lt;/dependency&gt; 日志冲突 123456789101112&lt;dependency&gt; &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt; &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.7.3&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 配置文件 123456#服务应用名字dubbo.application.name=provider#注册中心地址dubbo.registry.address=zookeeper://127.0.1:2181#哪些服务需要被注册dubbo.scan.base-packages=com.xiaoliu.service 接下来再导入依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt; &lt;version&gt;2.12.0&lt;/version&gt;&lt;/dependency&gt; 123456&lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.14&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt;&lt;/dependency&gt; 这个需要排除sl4j的依赖 1234567#消费者需要去哪拿服务需要暴露名字dubbo.application.name=provider#去注册中心dubbo.registry.address=zookeeper://127.0.1:2181 消费者业务接口 123456789101112消费者生产者接口都必须相同 @Servicepublic class Service&#123; @Reference//引用，Pom坐标，可以定义路径相同的接口名，远程引用 TicketService ticketService; public void buyTicket()&#123; String ticket = ticketService.getTicket(); System.out.println(&quot;拿到票&quot;+ticket); &#125;&#125; 1、提供者提供服务 ​ 1.导入依赖 ​ 2.配置注册中心地址，以及服务发现名，和要扫描的包 ​ 3.在想要被注册的服务上面 增加一个注解 @Service 2、消费者如何消费 ​ 1.导入依赖 ​ 2.配置注册中心地址，配置自己的服务名 ​ 3.从远程注入服务 @Reference","categories":[],"tags":[]},{"title":"任务","slug":"4-23/异步任务","date":"2022-04-23T06:18:43.181Z","updated":"2022-04-23T08:59:16.750Z","comments":true,"path":"2022/04/23/4-23/异步任务/","link":"","permalink":"https://dddwah11.github.io/2022/04/23/4-23/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"异步任务在业务需要异步处理的方法加入注解 @Async 在启动类加入 @EnableAsync 在控制层加入加入业务即可 邮件任务这里用qq邮件 配置文件 123456#开启加密验证spring.mail.properties.mail.smtp.ssl.enable=truespring.mail.username=1937589397@qq.comspring.mail.password=ixxxxxxxxxxbspring.mail.host=smtp.qq.com 123456789101112131415161718@Autowired JavaMailSender mailSender; @Test void contextLoads() &#123;// 发送邮件// 发件人// 内容 SimpleMailMessage message = new SimpleMailMessage(); message.setSubject(&quot;小刘&quot;); message.setText(&quot;hello&quot;); message.setFrom(&quot;1937589397@qq.com&quot;); message.setTo(&quot;1937589397@qq.com&quot;); mailSender.send(message); &#125; 复杂邮件 1234567891011121314 MimeMessage mimeMessage = mailSender.createMimeMessage();// 组装 MimeMessageHelper helper = new MimeMessageHelper(mimeMessage,true); helper.setSubject(subject); helper.setText(text,true);// 附件 helper.addAttachment(&quot;1.jpg&quot;,new File(&quot;D:\\\\壁纸\\\\5b8b4cf6143640c98cd46cd77d26f292.jpg&quot;)); helper.setTo(&quot;1937589397@qq.com&quot;); helper.setFrom(&quot;1937589397@qq.com&quot;); mailSender.send(mimeMessage); 定时执行任务12345678TaskeScheduler 任务调度者TaskExecutor 认为执行者@EnableScueduling开启定时功能的注解在启动类@Scheduled 什么时候执行 Cron表达式 1234567891011121314@Servicepublic class ScheduleService &#123;// cron表达// 秒 分 时 日 月 周几// 下面表达式表示是 每一周的每0秒执行//@Scheduled(cron = &quot;0 * * * * 0-7&quot;)// 下面表达的是 每一天天的16时 44分 执行 @Scheduled(cron = &quot;1 48 16 * * ?&quot;)// 30 0/5 10 18, * ? 每天 10点和18点 每隔五分钟执行一次 public void hello()&#123; System.out.println(&quot;您被执行了&quot;); &#125;&#125;","categories":[],"tags":[]},{"title":"swagger","slug":"4-22/swagger","date":"2022-04-22T08:42:39.305Z","updated":"2022-04-23T06:18:47.217Z","comments":true,"path":"2022/04/22/4-22/swagger/","link":"","permalink":"https://dddwah11.github.io/2022/04/22/4-22/swagger/","excerpt":"","text":"Swagger简介 前后端分离 Vue + SpringBoot Swagger最流行的API框架 在项目中使用swagger需要springfox； swagger2 ui spirngboot集成swagger1、新建springweb项目 2、导入依赖 12345&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt; 12345&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt; 3、配置swagger 1234@Configuration@EnableSwagger2//开启swagger2public class SwaggerConfig &#123;&#125; 测试页面 http://localhost:8080/swagger-ui.html swagger的bean实例 Docket SwaggerConfig 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.xiaoliu.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.RequestHandler;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;import java.util.ArrayList;/** * @author: 61分 * @date: 2022/4/22 17:39 * @description: */@Configuration@EnableSwagger2//开启swagger2public class SwaggerConfig &#123;// 配置swagger的Docket bean实例 @Bean public Docket docket()&#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) &#125;// 配置swagger信息=apiinfo private ApiInfo apiInfo()&#123; System.out.println(&quot;doswagger&quot;);// 作者信息 Contact contact = new Contact(&quot;xiaoliu&quot;, &quot;https://dddwah11.github.io/&quot;, &quot;1937589397@qq.com&quot;); return new ApiInfo( &quot;APIInfo&quot;, &quot;swagger配置&quot;, &quot;v1.0&quot;, &quot;https://dddwah11.github.io/&quot;, contact, &quot;Apache 2.0&quot;, &quot;http://www.apache.org/licenses/LINCENSE-2.0&quot;, new ArrayList&lt;&gt;() ); &#125;&#125; Swagger配置扫描接口Docket.select() 123456789101112 .enable(false);// .select()// RequestHandlerSelectors配置需要扫描接口的方式// basePackage指定要扫描的包// any()扫描全部// none()都不扫描// withClassAnnotation;扫描类上的注解，参数是一个注解的反射对象// withMethodAnnotation;扫描方法上的注解 .apis(RequestHandlerSelectors.basePackage(&quot;com.xiaoliu.helloController&quot;))// path()过滤路径 .build(); 配置是否启动swagger 12.enable(false);//不启动swagger.select() 我们希望swagger在生产环境中使用，在发布时不使用 判断是不是生产环境 注入 enable() 12345678910111213 @Bean public Docket docket(Environment environment)&#123;// 设置要显示的flag环境 Profiles profiles =Profiles.of(&quot;dev&quot;,&quot;test&quot;);// 获取项目环境// 通过environment.acceptsProfiles判断是否处在自己设定的环境 boolean b = environment.acceptsProfiles(profiles); return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .enable(b) 配置文件中设置生产和发布环境 主配置文件设置 1spring.profiles.active=当前环境 swagger配置API文档分组12.apiInfo(apiInfo()).groupName(&quot;hello&quot;) 如何配置多个分组 1234@Beanpublic Docket docket1()&#123; return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;A&quot;);&#125; @ApiModel()//文档注释","categories":[],"tags":[]},{"title":"shiro安全框架 -springboot中集成","slug":"4-21/shiro","date":"2022-04-21T07:14:33.034Z","updated":"2022-04-21T16:22:20.875Z","comments":true,"path":"2022/04/21/4-21/shiro/","link":"","permalink":"https://dddwah11.github.io/2022/04/21/4-21/shiro/","excerpt":"","text":"1、导入依赖 2、配置文件 3、应用程序 12345678910111213141516获取当前对象Subject currentUser = SecurityUtils.getSubject();获取当前sessionSession session = currentUser.getSession();判断用户是否被认证currentUser.isAuthenticated()获取当前认证currentUser.getPrincipal() 用户角色currentUser.hasRole 粗粒度 currentUser.isPermitted(&quot;lightsaber:wield&quot;)细粒度 currentUser.isPermitted(&quot;winnebago:drive:eagle5&quot;)登出currentUser.logout() shiro登录认证1、创建realm对象，需要自定义类： 123456789101112131415public class UserRealm extends AuthorizingRealm &#123;//授权 @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123; System.out.println(&quot;授权doGetAuthorizationInfo&quot;); return null; &#125;//认证 @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123; System.out.println(&quot;认证doGetAuthenticationInfo&quot;); return null; &#125;&#125; 1234567891011@Configurationpublic class shiroConfig &#123;// ShiroFilterFactoryBean// Manager// 创建realm对象 @Bean public UserRealm userRealm()&#123; return new UserRealm(); &#125;&#125; 2、defaultWebSecurityManager 1234567@Bean public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;userRealm&quot;) UserRealm userRealm)&#123; DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager(); defaultWebSecurityManager.setRealm(userRealm);// 关联realm return defaultWebSecurityManager; &#125; 3、shiroFiterFactoryBean 1234567 @Bean(name = &quot;DefaultWebSecurityManager&quot;) public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;DefaultWebSecurityManager&quot;) DefaultWebSecurityManager defaultWebSecurityManager)&#123; ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();// 关联webSecurityManager shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager); return shiroFilterFactoryBean; &#125; ShiroFilterFactoryBean 12345678910111213141516171819202122232425@Bean public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager defaultWebSecurityManager)&#123; ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();// 关联webSecurityManager// 设置安全管理器 bean.setSecurityManager(defaultWebSecurityManager);// 添加shiro的内置过滤器 /* anon:无需认证 authc: 必须认证 user: 必须拥有 记住我 功能才能实现 perms: 拥有对某个资源权限功能才能能访问 role: 拥有某个角色权限 */ Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;(); filterMap.put(&quot;/user/add&quot;,&quot;authc&quot;); filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;); System.out.println(&quot;filterMap&quot;); bean.setFilterChainDefinitionMap(filterMap); return bean; &#125; 可在ShiroFilterFactoryBean 设置登录 bean.setLoginUrl(&quot;/toLogin&quot;); shiro实现用户认证在Controller中 12345678910111213141516171819202122@RequestMapping(&quot;/login&quot;) public String login(String username,String password)&#123; // 获取对象 Subject subject = SecurityUtils.getSubject();// 封装登录对象的数据为token UsernamePasswordToken token = new UsernamePasswordToken(username, password); subject.login(token); try &#123; subject.login(token);//执行登录方法，无异常就执行 return &quot;index&quot;; &#125; catch (UnknownAccountException e) &#123;//用户名不存在 model.addAttribute(&quot;msg&quot;,&quot;用户名错误&quot;); return &quot;login&quot;; &#125; catch (IncorrectCredentialsException e)&#123;//密码不存在 model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;); return &quot;login&quot;; &#125; catch (LockedAccountException e)&#123; model.addAttribute(&quot;msg&quot;,&quot;账号被锁定&quot;); return &quot;login&quot;; &#125; &#125; UserRealm类中 1234567891011121314@Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123; System.out.println(&quot;认证doGetAuthenticationInfo&quot;);// 用户名，密码，数据库中取 String username= &quot;root&quot;; String password= &quot;123456&quot;; UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken; if (!token.getUsername().equals(username))&#123; return null;//抛出异常UnknownAccountException &#125;// 密码认证shiro做 return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;&quot;); &#125; Shiro整合Mybatis搭建脚手架并测试，通过再进行下面的测试 在UserRealm中导入业务层接口 12@AutowiredUserService userService; 123456789101112// 连接数据库 UsernamePasswordToken userToken = (UsernamePasswordToken) authenticationToken; User user = userService.queryUserByName(userToken.getUsername()); if (user==null)&#123; //查无此人 return null;//UnknownAccountException &#125;// 密码认证shiro做 return new SimpleAuthenticationInfo(&quot;&quot;,user.getPassword(),&quot;&quot;); &#125; UserRealm类中 123456789101112131415// 连接数据库 UsernamePasswordToken userToken = (UsernamePasswordToken) authenticationToken; User user = userService.queryUserByName(userToken.getUsername()); if (user==null)&#123; //查无此人 return null;//UnknownAccountException &#125;// 加密：MD5加密，MD5盐值加密// md5：xwefqbrb134513451223qwer md5+盐值： xwefqbrb134513451223qwerusername// 密码认证shiro做，加密了// 密码认证shiro做 return new SimpleAuthenticationInfo(&quot;&quot;,user.getPassword(),&quot;&quot;); &#125; Shiro请求授权实现 在shiroConfig类中 12// 授权 filterMap.put(&quot;/user/add&quot;,&quot;perms[user:add]&quot;); 设置未授权的请求 12// 设置未授权的请求 bean.setUnauthorizedUrl(&quot;/noauth&quot;); 设置Controller 12345@RequestMapping(&quot;/noauth&quot;)@ResponseBodypublic String unauthorized()&#123; return &quot;未经授权无法访问该页面&quot;;&#125; 编写controller层 12345@RequestMapping(&quot;/noauth&quot;)@ResponseBodypublic String unauthorized()&#123; return &quot;未经授权无法访问该页面&quot;;&#125; 授权、12345678//授权 @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123; System.out.println(&quot;授权doGetAuthorizationInfo&quot;); SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(); info.addStringPermission(&quot;user:add&quot;);//这行是全部人都获取授权，想指定的人获得授权就注释这行 return info; &#125; 指定数据库中的某些用户获取数据 数据库中设定权限 UserRealm类中 123456// 拿到当前登录的对象 Subject subject = SecurityUtils.getSubject(); User currentUser = (User)subject.getPrincipal();//拿到user对象 info.addStringPermission(currentUser.getPerms()); return info; shiroConfig类中 12filterMap.put(&quot;/user/add&quot;,&quot;perms[user:add]&quot;);filterMap.put(&quot;/user/update&quot;,&quot;perms[user:update]&quot;); Shiro整合Thymeleaf导入依赖 shiro-thymeleaf 12345&lt;dependency&gt; &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt; &lt;version&gt;2.1.0&lt;/version&gt;&lt;/dependency&gt; 在UserRealm类中 12345// 整合shirodialect：整合 th 和 shiro @Bean public ShiroDialect getshiroDialect()&#123; return new ShiroDialect(); &#125;","categories":[],"tags":[]},{"title":"整合Mybatis","slug":"4-18/整合中Mybatis","date":"2022-04-18T07:16:30.446Z","updated":"2022-04-18T13:44:42.616Z","comments":true,"path":"2022/04/18/4-18/整合中Mybatis/","link":"","permalink":"https://dddwah11.github.io/2022/04/18/4-18/%E6%95%B4%E5%90%88%E4%B8%ADMybatis/","excerpt":"","text":"准备工作：搭建环境并测试（导入包，配置文件，myabtis配置，编写sql） 1、编写实体类1234567891011121314151617181920package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author: 61分 * @date: 2022/4/18 15:29 * @description: */@Data@AllArgsConstructor@NoArgsConstructorpublic class User &#123; private Integer id; private String name; private String password;&#125; 2、编写接口1234567891011package com.xiaoliu.mapper;/** * @author: 61分 * @date: 2022/4/18 15:32 * @description: */@org.apache.ibatis.annotations.Mapperpublic interface Mapper &#123;&#125; 1@Repository //Dao层 用该注解 再到resource目录下配置xml文件 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xiaoliu.mapper&quot;&gt; &lt;select id=&quot;selectBlog&quot; resultType=&quot;User&quot;&gt; select * from Blog where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 在springboot中配置文件别名及mapper.xml文件 12mybatis.type-aliases-package=com.xiaoliu.pojomybatis.mapper-locations=classpath:/mybatis/mapper/*.xml 增删改查 1234567891011121314151617&lt;select id=&quot;queryUserListById&quot; resultType=&quot;User&quot;&gt; select * from mybatis.user where id = #&#123;id&#125;&lt;/select&gt;&lt;select id=&quot;queryUserList&quot; resultType=&quot;User&quot;&gt; select * from mybatis.user&lt;/select&gt;&lt;insert id=&quot;addUser&quot; parameterType=&quot;User&quot;&gt; insert into mybatis.user (id, name, password) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;);&lt;/insert&gt;&lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt; update mybatis.user set name = #&#123;name&#125;, password = #&#123;password&#125; where id = #&#123;id&#125;; 配置文件： 12345678910111213141516# 应用名称spring.application.name=mybatisSpringboot# 数据库驱动：spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver# 数据源名称spring.datasource.name=defaultDataSource# 数据库连接地址spring.datasource.url=jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8# 数据库用户名&amp;密码：spring.datasource.username=rootspring.datasource.password=123456# 应用服务 WEB 访问端口server.port=8080mybatis.type-aliases-package=com.xiaoliu.pojomybatis.mapper-locations=classpath:/mybatis/mapper/*.xml","categories":[],"tags":[]},{"title":"整合Druid","slug":"4-18/整合druid","date":"2022-04-18T06:31:03.389Z","updated":"2022-04-18T07:16:17.307Z","comments":true,"path":"2022/04/18/4-18/整合druid/","link":"","permalink":"https://dddwah11.github.io/2022/04/18/4-18/%E6%95%B4%E5%90%88druid/","excerpt":"","text":"1、导入相关依赖123456789101112&lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.2.9&lt;/version&gt;&lt;/dependency&gt; 2、配置文件1234567891011121314151617181920212223type: com.alibaba.druid.pool.DruidDataSource #SpringBoot默认是不注入这些的，需要自己绑定 #druid数据源专有配置 initialSize: 5 minIdle: 5 maxActive: 20 maxWait: 60000 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 300000 validationQuery: SELECT 1 FROM DUAL testWhileIdle: true testOnBorrow: false testOnReturn: false poolPreparedStatements: true #配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入 #如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity #则导入log4j 依赖就行 filters: stat,wall,log4j maxPoolPreparedStatementPerConnectionSize: 20 useGlobalDataSourceStat: true connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 配置进去没用，也能进去，先放着 3、绑定配置文件1234567891011121314151617181920212223package com.xiaoliu.config;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.sql.DataSource;/** * @author: 61分 * @date: 2022/4/18 14:33 * @description: */@Configurationpublic class DruidConfig &#123; @ConfigurationProperties(prefix = &quot;spring.datasource&quot;) @Bean public DataSource DruidDataSource()&#123; return new DruidDataSource(); &#125;&#125; 4、DruidConfig12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.xiaoliu.config;import com.alibaba.druid.pool.DruidDataSource;import com.alibaba.druid.support.http.StatViewServlet;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.sql.DataSource;import java.util.HashMap;/** * @author: 61分 * @date: 2022/4/18 14:33 * @description: */@Configurationpublic class DruidConfig &#123; @ConfigurationProperties(prefix = &quot;spring.datasource&quot;) @Bean public DataSource DruidDataSource()&#123; return new DruidDataSource(); &#125;// 后台监控:web.xml// springboot集成了servlet，没有web.xml 可以使用ServletRegistrationBean，注册 @Bean public ServletRegistrationBean statViewServlet()&#123; ServletRegistrationBean&lt;StatViewServlet&gt; bean = new ServletRegistrationBean&lt;&gt;(new StatViewServlet(), &quot;/druid/*&quot;);// 后台有人登陆，账号密码配置 HashMap&lt;String, String&gt; initParameter = new HashMap&lt;&gt;();// 设置参数 initParameter.put(&quot;loginUsername&quot;, &quot;admin&quot;);//默认的数值 initParameter.put(&quot;loginPassword&quot;,&quot;123456&quot;);//默认的数值// 允许谁访问 initParameter.put(&quot;allow&quot;,&quot;&quot;);//后面参数不写，任何人都能访问// 禁止谁访问 initParameter.put(&quot;xxx&quot;,&quot;ip地址&quot;); bean.setInitParameters(initParameter);//设置初始化参数 return bean; &#125;&#125; 过滤器 12345678910111213// filter @Bean public FilterRegistrationBean filterStart()&#123; FilterRegistrationBean&lt;Filter&gt; bean = new FilterRegistrationBean&lt;&gt;(); bean.setFilter(new WebStatFilter());// 设置过滤请求 HashMap&lt;String, String&gt; initParameters = new HashMap&lt;&gt;();// 设置不统计的东西 initParameters.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;); bean.setInitParameters(initParameters); return bean; &#125;","categories":[],"tags":[]},{"title":"springWeb-02开发","slug":"4-16/springboot-web-02","date":"2022-04-16T14:15:45.600Z","updated":"2022-04-17T14:46:06.241Z","comments":true,"path":"2022/04/16/4-16/springboot-web-02/","link":"","permalink":"https://dddwah11.github.io/2022/04/16/4-16/springboot-web-02/","excerpt":"","text":"员工列表展示 提前公共页面 &#96;th:replace&#x3D;”~{commons&#x2F;commons::sidebar&#96;&#96; &#96;&#96;&#96; 如果要传参，可以直接使用（）传参，接受判断 列表循坏展示 &#96; &lt;td th:text&#x3D;”$","categories":[],"tags":[]},{"title":"springWeb开发","slug":"4-16/springboot-web开发","date":"2022-04-16T05:16:40.666Z","updated":"2022-04-16T14:15:31.726Z","comments":true,"path":"2022/04/16/4-16/springboot-web开发/","link":"","permalink":"https://dddwah11.github.io/2022/04/16/4-16/springboot-web%E5%BC%80%E5%8F%91/","excerpt":"","text":"1、首页配置：所有html页面使用thymeleaf接管：url:@&#123;&#125; 首页： 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt; &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt; &lt;meta name=&quot;author&quot; content=&quot;&quot;&gt; &lt;title&gt;Signin Template for Bootstrap&lt;/title&gt; &lt;!-- Bootstrap core CSS --&gt; &lt;link th:href=&quot;@&#123;/css/bootstrap.min.css&#125;&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- Custom styles for this template --&gt; &lt;link th:href=&quot;@&#123;/css/signin.css&#125;&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body class=&quot;text-center&quot;&gt; &lt;form class=&quot;form-signin&quot; action=&quot;dashboard.html&quot;&gt; &lt;img class=&quot;mb-4&quot; th:src=&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot; alt=&quot;&quot; width=&quot;72&quot; height=&quot;72&quot;&gt; &lt;h1 class=&quot;h3 mb-3 font-weight-normal&quot;&gt;Please sign in&lt;/h1&gt; &lt;label class=&quot;sr-only&quot;&gt;Username&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; required=&quot;&quot; autofocus=&quot;&quot;&gt; &lt;label class=&quot;sr-only&quot;&gt;Password&lt;/label&gt; &lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; required=&quot;&quot;&gt; &lt;div class=&quot;checkbox mb-3&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; value=&quot;remember-me&quot;&gt; Remember me &lt;/label&gt; &lt;/div&gt; &lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; type=&quot;submit&quot;&gt;Sign in&lt;/button&gt; &lt;p class=&quot;mt-5 mb-3 text-muted&quot;&gt;© 2017-2018&lt;/p&gt; &lt;a class=&quot;btn btn-sm&quot;&gt;中文&lt;/a&gt; &lt;a class=&quot;btn btn-sm&quot;&gt;English&lt;/a&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; controller： 1234567891011121314151617181920212223package com.xiaoliu.config;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * @author: 61分 * @date: 2022/4/15 21:17 * @description: *///扩展 springmvc dispatcherservlet@Configurationpublic class MyMvcConfig implements WebMvcConfigurer &#123; //视图跳转 @Override public void addViewControllers(ViewControllerRegistry registry) &#123; registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;); registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;index&quot;); &#125;&#125; 2、页面国际化i18n 设置login.properties文件， login.tip login.password login.username login.remember 怎么识别国际化 通过SpirngBoot——MessageSourceAutofiguration类 在配置application.properties spring.messages.basename=i18n.login thymeleaf国际化消息语法：#&#123;&#125; 1th:text=&quot;#&#123;login.password&#125;&quot; 实现语言切换 1th:href=&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;&gt;中文 1th:href=&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;&gt;Englis div自己的组件在config中的MyMvcConfig类中 并将其配置到springboot容器中 @Bean 12345// 向容器中注入组件，自定义的国际化组件 @Bean public LocaleResolver localeResolver()&#123; return new MylocalResolver(); &#125; 自定义的组件 1234567891011121314151617181920212223242526272829303132333435package com.xiaoliu.config;import org.springframework.util.StringUtils;import org.springframework.web.servlet.LocaleResolver;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Locale;/** * @author: 61分 * @date: 2022/4/16 15:22 * @description: */public class MylocalResolver implements LocaleResolver &#123; @Override public Locale resolveLocale(HttpServletRequest httpServletRequest) &#123;// 获取语言参数 String language = httpServletRequest.getParameter(&quot;l&quot;); Locale locale = Locale.getDefault(); //如果没有就使用默认的// 如果请求中携带了地区化的参数 if (!StringUtils.isEmpty(language))&#123;// 分割 zh_CN String[] split = language.split(&quot;_&quot;);// 国家 地区 locale = new Locale(split[0], split[1]); &#125; return locale; &#125; @Override public void setLocale(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale) &#123; &#125;&#125; 修改返回的url在自定义的视图跳转MyMvcConfig中 视图跳转到dashboard的时候 名字为：main.html 1registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;dashboard&quot;); 在controller返回重定向的页面为&#x2F;main.html 12if (!StringUtils.isEmpty(username) &amp;&amp; &quot;123&quot;.equals(password)) &#123; return &quot;redirect:/main.html&quot;; 拦截器在config中 编写LoginHandlerInterceptor拦截器 123456789101112131415161718192021222324252627package com.xiaoliu.config;import org.springframework.web.servlet.HandlerInterceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * @author: 61分 * @date: 2022/4/16 16:14 * @description: */public class LoginHandlerInterceptor implements HandlerInterceptor &#123; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;// 登录之后应该有用户的session Object loginUser = request.getSession().getAttribute(&quot;loginUser&quot;); if (loginUser==null)&#123; request.setAttribute(&quot;msg&quot;,&quot;没有权限，请先登录！&quot;); request.getRequestDispatcher(&quot;/index.html&quot;).forward(request,response); return false; &#125;else return true; &#125;&#125; 在mvc类中重写拦截器 123456@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123; registry.addInterceptor(new LoginHandlerInterceptor()) .addPathPatterns(&quot;/**&quot;)//拦截的页面 .excludePathPatterns(&quot;/&quot;,&quot;/index.html&quot;,&quot;/user/login&quot;,&quot;/css/**&quot;,&quot;/js/**&quot;,&quot;/img/**&quot;);//不能被拦截的页面&#125;","categories":[],"tags":[]},{"title":"通过java自建数据表","slug":"4-16/在javav中建立数据表","date":"2022-04-15T16:12:57.936Z","updated":"2022-04-15T16:16:08.051Z","comments":true,"path":"2022/04/16/4-16/在javav中建立数据表/","link":"","permalink":"https://dddwah11.github.io/2022/04/16/4-16/%E5%9C%A8javav%E4%B8%AD%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E8%A1%A8/","excerpt":"","text":"建立一个员工部门表：pojo:Employee: 123456789101112131415161718192021222324252627282930313233package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import java.util.Date;/** * @author: 61分 * @date: 2022/4/15 23:12 * @description: */@Data@NoArgsConstructorpublic class Employee &#123; private Integer id; private String lastName; private String email; private Integer gender; private Department department; private Date birth; public Employee(Integer id, String lastName, String email, Integer gender, Department department) &#123; this.id = id; this.lastName = lastName; this.email = email; this.gender = gender; this.department = department; this.birth = new Date(); &#125;&#125; Department: 12345678910111213141516171819package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author: 61分 * @date: 2022/4/15 22:17 * @description: */@Data@AllArgsConstructor@NoArgsConstructorpublic class Department &#123; private Integer id; private String department;&#125; Dao层：EmployeeDao： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.xiaoliu.dao;import com.xiaoliu.pojo.Department;import com.xiaoliu.pojo.Employee;import org.springframework.beans.factory.annotation.Autowired;import java.util.Collection;import java.util.HashMap;import java.util.Map;/** * @author: 61分 * @date: 2022/4/15 23:44 * @description: */public class EmployeeDao &#123; private static Map&lt;Integer, Employee&gt; employees; @Autowired private DepartmentDao departmentDao; static &#123; employees = new HashMap&lt;Integer, Employee&gt;();//创建一个部门表 employees.put(1001, new Employee(1001,&quot;AA&quot;,&quot;A13151@ew.com&quot;,0,new Department(101,&quot;教学部&quot;))); employees.put(1002, new Employee(1002,&quot;BB&quot;,&quot;B13151@ew.com&quot;,1,new Department(102,&quot;后勤部&quot;))); employees.put(1003, new Employee(1003,&quot;CC&quot;,&quot;C13151@ew.com&quot;,0,new Department(103,&quot;保卫部&quot;))); employees.put(1004, new Employee(1004,&quot;DD&quot;,&quot;D13151@ew.com&quot;,1,new Department(104,&quot;科研部&quot;))); employees.put(1005, new Employee(1005,&quot;EE&quot;,&quot;E13151@ew.com&quot;,0,new Department(105,&quot;学生部&quot;))); &#125;// 主键自增ID private static Integer initId = 1006;// 增加一个员工 public void save(Employee employee)&#123; if (employee.getId()==0)&#123; employee.setId(initId++); &#125; employee.setDepartment(departmentDao.getDepartment(employee.getDepartment().getId())); employees.put(employee.getId(),employee); &#125;// 查询全部员工 public Collection&lt;Employee&gt; getAll()&#123; return employees.values(); &#125;// 通过id查询员工 public Employee getById(Integer id)&#123; return employees.get(id); &#125;// 删除员工通过id public Employee removeById(Integer id)&#123; return employees.remove(id); &#125;&#125; DepartmentDao： 1234567891011121314151617181920212223242526272829303132333435package com.xiaoliu.dao;import com.xiaoliu.pojo.Department;import java.util.Collection;import java.util.HashMap;import java.util.Map;/** * @author: 61分 * @date: 2022/4/15 23:18 * @description: */public class DepartmentDao &#123;// 模拟数据库中的数据 private static Map&lt;Integer, Department&gt; departments = null; static &#123; departments = new HashMap&lt;Integer, Department&gt;();//创建一个部门数据表 departments.put(101,new Department(101,&quot;教学部&quot;)); departments.put(102,new Department(102,&quot;后勤部&quot;)); departments.put(103,new Department(103,&quot;保卫部&quot;)); departments.put(104,new Department(104,&quot;科研部&quot;)); departments.put(105,new Department(105,&quot;学生部&quot;)); &#125;// 获得部门信息 public Collection&lt;Department&gt; getDepartments()&#123; return departments.values(); &#125;// 通过id得到部门 public Department getDepartment(Integer id)&#123; return departments.get(id); &#125;&#125;","categories":[],"tags":[]},{"title":"MVC配置原理及thymeleaf","slug":"4-15/thymeleaf语法","date":"2022-04-15T12:38:44.705Z","updated":"2022-04-15T15:59:59.772Z","comments":true,"path":"2022/04/15/4-15/thymeleaf语法/","link":"","permalink":"https://dddwah11.github.io/2022/04/15/4-15/thymeleaf%E8%AF%AD%E6%B3%95/","excerpt":"","text":"MVC配置原理如果想要div一些定制化的功能，只要写一个组件，然后将它交给springboot，springboot就会自动帮我们转配 12345678910111213141516171819202122232425262728293031323334package com.xiaoliu.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.View;import org.springframework.web.servlet.ViewResolver;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import java.util.Locale;/** * @author: 61分 * @date: 2022/4/15 21:17 * @description: *///扩展 springmvc dispatcherservlet@Configurationpublic class MyMvcConfig implements WebMvcConfigurer &#123; @Bean public ViewResolver myViewResolver()&#123; return new myViewResolver(); &#125;// 自定义一个视图解析器 public static class myViewResolver implements ViewResolver &#123; @Override public View resolveViewName(String s, Locale locale) throws Exception &#123; return null; &#125; &#125;&#125; 基本的视图跳转 12345678public class MyMvcConfig implements WebMvcConfigurer &#123; //视图跳转 @Override public void addViewControllers(ViewControllerRegistry registry) &#123; registry.addViewController(&quot;/xiaoliu&quot;).setViewName(&quot;index&quot;); &#125;&#125; 这样的话，视图跳转的文件，只能在templates， 而且thymeleaf也会失效 如果要扩展的话，官方建议这样去做 springboot中，xxxConfiguraion 可以实现很多扩展 thymeleafthymeleaf常用命名空间： xmlns:th&#x3D;”http://www.thymeleaf.org&quot;xmlns:sec&#x3D;”http://www.thymeleaf.org/extras/spring-security&quot;xmlns:shiro&#x3D;”http://www.pollix.at/thymeleaf/shiro&quot;","categories":[],"tags":[]},{"title":"SpringBoot Web开发","slug":"4-14/SpringBoot-Web开发","date":"2022-04-14T12:31:54.329Z","updated":"2022-04-14T14:35:21.083Z","comments":true,"path":"2022/04/14/4-14/SpringBoot-Web开发/","link":"","permalink":"https://dddwah11.github.io/2022/04/14/4-14/SpringBoot-Web%E5%BC%80%E5%8F%91/","excerpt":"","text":"jar:webpp! 导入静态资源 首页 jsp，模板引擎Thymeleaf 装配扩展SpringMVC 增删改查 拦截器 国际化 在springboot，我们使用以下方式处理静态资源 webjars localhost:8080/webjars/ public，static，&#x2F;**,resource localhost:8080/ 优先级 resource&gt;static(默认)&gt;public 首页如何定制index.html 最好设置在static里 12在templates目录下的页面，只通过controller来跳转需要模板引擎的支持","categories":[],"tags":[]},{"title":"自动装配原理","slug":"4-14/springboot主启动类运行","date":"2022-04-14T08:13:07.450Z","updated":"2022-04-15T11:45:51.337Z","comments":true,"path":"2022/04/14/4-14/springboot主启动类运行/","link":"","permalink":"https://dddwah11.github.io/2022/04/14/4-14/springboot%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB%E8%BF%90%E8%A1%8C/","excerpt":"","text":"主启动类运行 初始化 判断是不是为一个web应用 打开监听器全局处理上下文 通过主类加载，通过类加载获取spring。factories 装配环境参数 yaml 可以给实体类赋值 &#96;&#96;&#96;yaml k &#x3D; v注入到我们配置类中普通的key-valuename : xiaoliu dog: name: xiaogou age: 3 对象student: name: xiaoliu age: 3 行内写法student1: {name: xialiu, age: 3} ##数组pets: dog vat cat pets1: [dog,we,zw] ##对象 person: name: xiaoliu age: 3 happy: flase birth: 2022&#x2F;10&#x2F;2 map: {k2: v1,k1: v2} list: - code - music - book 12345```java@ConfigurationProperties(prefix = &quot;person&quot;) 可以通过这个注解将配置文件中的值映射到组件 @component 上 也可以通过 @PropertySource(&quot;classpath:xiaoliu.properties&quot;) 注解映射到组件上 12345//加载指定的配置文件@PropertySource(&quot;classpath:xiaoliu.properties&quot;)public class Person &#123;// SPEL表达式取值 @Value(&quot;$&#123;name&#125;&quot;) 松散绑定在yml中 写的为last-name 与lastName是一样的 jsr303校验约束注解名称 约束注解说明@Null 验证对象是否为空@NotNull 验证对象是否为非空@AssertTrue 验证 Boolean 对象是否为 true@AssertFalse 验证 Boolean 对象是否为 false@Min 验证 Number 和 String 对象是否大等于指定的值@Max 验证 Number 和 String 对象是否小等于指定的值@DecimalMin 验证 Number 和 String 对象是否大等于指定的值，小数存在精度@DecimalMax 验证 Number 和 String 对象是否小等于指定的值，小数存在精度@Size 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内@Digits 验证 Number 和 String 的构成是否合法@Past 验证 Date 和 Calendar 对象是否在当前时间之前@Future 验证 Date 和 Calendar 对象是否在当前时间之后@Pattern 验证 String 对象是否符合正则表达式的规则 自动配置原理xxxAutoConfiguration: 默认值 xxxproperties 和配置文件绑定 我们就可以使用自定义的配置 每一个 xxxAutoConfiguration 都是容器中的一个组件，最后都加入到容器中让他们自动配置 这就是自动装配的原理!精髓:1)、SpringBoot启动会加载大量的自动配置类2)、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中;3)、我们再来看这个自动配置类中到底配置了哪些组件; (只要我们要用的组件存在在其中，我们就不需要再手动配置了)4)、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可;xxxxAutoConfigurartion:自动配置类;给容器中添加组件xxxxProperties:封装配置文件中相关属性文件","categories":[],"tags":[]},{"title":"每日算法-quicksort","slug":"2022-4-13/每日算法-quicksort","date":"2022-04-13T15:47:43.908Z","updated":"2022-04-14T02:25:40.470Z","comments":true,"path":"2022/04/13/2022-4-13/每日算法-quicksort/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-13/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-quicksort/","excerpt":"","text":"有没有既不浪费空间又可以快一点的排序算法呢？那就是快速排啦！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * @author: 61分 * @date: 2022/4/14 0:05 * @description: */public class quickSort &#123; public static void quickSort(int [] arr,int low,int high)&#123; int i,j,tmp,t; if (low&gt;high)&#123; return; &#125; i = low; j = high; tmp = arr[low]; while (i&lt;j)&#123; // 先看右边,从最右边递减 while (tmp&lt;=arr[j]&amp;&amp;i&lt;j)&#123; j--; &#125;// 再看左边，递加 while (tmp&gt;=arr[i]&amp;&amp;i&lt;j)&#123; i++; &#125;// 满足条件的话，交换他们的值 if (i&lt;j)&#123; t = arr[j]; arr[j] = arr[i]; arr[i] = t; &#125; &#125; arr[low] = arr[i]; arr[i] = tmp;// 之后递归调用 处理左边的 quickSort(arr,low,j-1);// 处理右边的 quickSort(arr,j+1,high); &#125; public static void main(String[] args) &#123; int [] num= &#123;10,54,21,42,78,65,48&#125;; quickSort(num,0,num.length-1); for (int i = 0; i &lt; num.length; i++) &#123; System.out.println(num[i]); &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"spirngboot初学","slug":"2022-4-13/springboot","date":"2022-04-13T14:47:41.164Z","updated":"2022-04-14T02:25:29.426Z","comments":true,"path":"2022/04/13/2022-4-13/springboot/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-13/springboot/","excerpt":"","text":"SpringBoot原理1、自动装配原理pom.xml spring-boot-dependencies:核心依赖在父工程中 我们在引入一些spring依赖的时候，不需要指定版本，因为有这些版本仓库 启动器 &#96;&#96;&#96;xml org.springframework.boot spring-boot-starter-web 123456789101112131415161718* 是springboot的启动场景 * 比如springbootwb 就帮我们自动导入web环境所需的所有依赖！* 将所有的功能场景变成一个个启动器**springboot主程序** ```java@SpringBootApplicationpublic class HelloWorldApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(HelloWorldApplication.class, args); &#125;&#125; 注解 12@SpringBootConfiguration@SpringBootConfiguration 自动配置的核心文件 WEB-INF/spring.factories 所有的资源加载到配置类中 1Properties properties = PropertiesLoaderUtils.loadProperties(resource) 核心注解 1@ConditionalOnXXX 在满足所有条件才会生效 springboot自动配置都在启动的时候扫描并加载 spirng.properties 所有的自动配置类都在这个配置文件中，通过判断核心注解是否满足条件才能生效 springboot在启动的时候，通过类路径下的 WEB-INF/spirng.properties 获得指定的值 将这些自动配置的类导入容器，自动配置就会生效 即完成自动配置 整合javaEE 解决方案和自动配置的东西都在 spring-boot-test-autoconfigure-2.3.7.RELEASE.jar 中","categories":[],"tags":[]},{"title":"Mybatis-03","slug":"2022-4-13/Mybatis-03","date":"2022-04-13T02:48:32.989Z","updated":"2022-04-14T02:28:18.256Z","comments":true,"path":"2022/04/13/2022-4-13/Mybatis-03/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-13/Mybatis-03/","excerpt":"","text":"Mybatis-03设置（settings）这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。 设置名 描述 有效值 默认值 cacheEnabled 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。 true | false true lazyLoadingEnabled 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 true | false false aggressiveLazyLoading 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。 true | false false （在 3.4.1 及之前的版本中默认为 true） multipleResultSetsEnabled 是否允许单个语句返回多结果集（需要数据库驱动支持）。 true | false true useColumnLabel 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 true | false true useGeneratedKeys 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。 true | false False autoMappingBehavior 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。 NONE, PARTIAL, FULL PARTIAL autoMappingUnknownColumnBehavior 指定发现自动映射目标未知列（或未知属性类型）的行为。NONE: 不做任何反应WARNING: 输出警告日志（&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39; 的日志等级必须设置为 WARN）FAILING: 映射失败 (抛出 SqlSessionException) NONE, WARNING, FAILING NONE defaultExecutorType 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。 SIMPLE REUSE BATCH SIMPLE defaultStatementTimeout 设置超时时间，它决定数据库驱动等待数据库响应的秒数。 任意正整数 未设置 (null) defaultFetchSize 为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。 任意正整数 未设置 (null) defaultResultSetType 指定语句默认的滚动策略。（新增于 3.5.2） FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置） 未设置 (null) safeRowBoundsEnabled 是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 true | false False safeResultHandlerEnabled 是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。 true | false True mapUnderscoreToCamelCase 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 true | false False localCacheScope MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。 SESSION | STATEMENT SESSION jdbcTypeForNull 当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。 OTHER lazyLoadTriggerMethods 指定对象的哪些方法触发一次延迟加载。 用逗号分隔的方法列表。 equals,clone,hashCode,toString defaultScriptingLanguage 指定动态 SQL 生成使用的默认脚本语言。 一个类型别名或全限定类名。 org.apache.ibatis.scripting.xmltags.XMLLanguageDriver defaultEnumTypeHandler 指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5） 一个类型别名或全限定类名。 org.apache.ibatis.type.EnumTypeHandler callSettersOnNulls 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 true | false false returnInstanceForEmptyRow 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2） true | false false logPrefix 指定 MyBatis 增加到日志名称的前缀。 任何字符串 未设置 logImpl 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING 未设置 proxyFactory 指定 Mybatis 创建可延迟加载对象所用到的代理工具。 CGLIB | JAVASSIST JAVASSIST （MyBatis 3.3 以上） vfsImpl 指定 VFS 的实现 自定义 VFS 的实现的类全限定名，以逗号分隔。 未设置 useActualParamName 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1） true | false true configurationFactory 指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3） 一个类型别名或完全限定类名。 未设置 一个配置完整的 settings 元素的示例如下： 1234567891011121314151617&lt;settings&gt; &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt; &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt; &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt; &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt; &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt; &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt; &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt; &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt;&lt;/settings&gt; 123&lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;&lt;/settings&gt; STDOUT_LOGGING标准日志输出：Logging initialized using ‘class org.apache.ibatis.logging.stdout.StdOutImpl’ adapter.PooledDataSource forcefully closed&#x2F;removed all connections.PooledDataSource forcefully closed&#x2F;removed all connections.PooledDataSource forcefully closed&#x2F;removed all connections.PooledDataSource forcefully closed&#x2F;removed all connections.Opening JDBC ConnectionCreated connection 775386112.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]&#x3D;&#x3D;&gt; Preparing: select id,name,password from mybatis.user where id &#x3D; ?&#x3D;&#x3D;&gt; Parameters: 2(Integer)&lt;&#x3D;&#x3D; Columns: id, name, password&lt;&#x3D;&#x3D; Row: 2, 大刘哥, 1234&lt;&#x3D;&#x3D; Total: 1User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@2e377400]Returned connection 775386112 to pool. Process finished with exit code 0 Log4j 控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等； 我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。 最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。 ​ 导入相关依赖 log4j.properties 123456789101112131415161718192021222324#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码log4j.rootLogger=DEBUG,console,file#控制台输出的相关设置log4j.appender.console = org.apache.log4j.ConsoleAppenderlog4j.appender.console.Target = System.outlog4j.appender.console.Threshold=DEBUGlog4j.appender.console.layout = org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern=[%c]-%m%n#文件输出的相关设置log4j.appender.file = org.apache.log4j.RollingFileAppenderlog4j.appender.file.File=./log/xiaoliu.loglog4j.appender.file.MaxFileSize=10mblog4j.appender.file.Threshold=DEBUGlog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n#日志输出级别log4j.logger.org.mybatis=DEBUGlog4j.logger.java.sql=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.ResultSet=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUG 配置文件的实现： 123&lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt; &lt;/settings&gt; D:\\Java\\jdk1.8.0_191\\bin\\java.exe -ea -Didea.test.cyclic.buffer.size&#x3D;1048576 “-javaagent:D:\\IntelliJ?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Opening JDBC Connection?org.apache.ibatis.datasource.pooled.PooledDataSource?-Created connection 1151844284.?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]?com.xiaoliu.Dao.UserMapper.getUserById?-&#x3D;&#x3D;&gt; Preparing: select id,name,password from mybatis.user where id &#x3D; ??com.xiaoliu.Dao.UserMapper.getUserById?-&#x3D;&#x3D;&gt; Parameters: 2(Integer)?com.xiaoliu.Dao.UserMapper.getUserById?-&lt;&#x3D;&#x3D; Total: 1User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’}?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]?org.apache.ibatis.transaction.jdbc.JdbcTransaction?-Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@44a7bfbc]?org.apache.ibatis.datasource.pooled.PooledDataSource?-Returned connection 1151844284 to pool. Process finished with exit code 0 在使用时要记得到入包 1import org.apache.log4j.Logger; 并在要使用的类下面使用当前的class 1static Logger logger = Logger.getLogger(UserMapperTest.class); 分页","categories":[],"tags":[]},{"title":"每日算法","slug":"2022-4-12/---","date":"2022-04-12T16:33:51.713Z","updated":"2022-04-13T02:34:51.169Z","comments":true,"path":"2022/04/13/2022-4-12/---/","link":"","permalink":"https://dddwah11.github.io/2022/04/13/2022-4-12/---/","excerpt":"","text":"1234567891011121314151617181920212223242526/** * @author: 61分 * @date: 2022/4/13 0:23 * @description: */public class popSort &#123; public static void main(String[] args) &#123; int[] nums=&#123;1,2,3,4,5,6,89,77&#125;; int tmp = 0; for (int i = 0; i &lt; nums.length-1; i++) &#123; for (int j = 0; j &lt; nums.length-i-1; j++) &#123; if (nums[j]&lt;nums[j+1])&#123; tmp = nums[j]; nums[j] = nums[j+1]; nums[j+1] = tmp; &#125; &#125; &#125; for (int k = 0; k &lt; nums.length; k++) &#123; System.out.println(nums[k]); &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"Mybatis02","slug":"2022-4-12/接口必须和Mapper配置文件同名接口必须和Mapper配置文件在同一个包下","date":"2022-04-12T12:09:05.748Z","updated":"2022-04-13T06:25:59.754Z","comments":true,"path":"2022/04/12/2022-4-12/接口必须和Mapper配置文件同名接口必须和Mapper配置文件在同一个包下/","link":"","permalink":"https://dddwah11.github.io/2022/04/12/2022-4-12/%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8C%E5%90%8D%E6%8E%A5%E5%8F%A3%E5%BF%85%E9%A1%BB%E5%92%8CMapper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8C%85%E4%B8%8B/","excerpt":"","text":"映射器 接口必须和Mapper配置文件同名 接口必须和Mapper配置文件在同一个包下 生命周期及其作用域 生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 属性名和字段名的不一致 利用resultMap（结果集映射） UserMapper.xml： 12345678910111213141516171819&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.xiaoliu.Dao.UserMapper&quot;&gt;&lt;!-- 结果集映射--&gt; &lt;!-- column为数据库中的字段名，property为实体类中的属性--&gt; &lt;resultMap id=&quot;UserMap&quot; type=&quot;com.xiaoliu.pojo.User&quot;&gt;&lt;!-- &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;--&gt;&lt;!-- &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;--&gt; &lt;result property=&quot;pwd&quot; column=&quot;password&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;getUserById&quot; resultMap=&quot;UserMap&quot;&gt; select id,name,password from mybatis.user where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 测试类： 1234567891011121314public class UserMapperTest &#123; @Test public void getUserById()&#123; SqlSession sqlSession = MybatisUtils.getSqlSession();// 获取接口 UserMapper mapper = sqlSession.getMapper(UserMapper.class); User user = mapper.getUserById(2); System.out.println(user); sqlSession.close(); &#125;&#125; 结果： User{id&#x3D;2, name&#x3D;’大刘哥’, pwd&#x3D;’1234’} Process finished with exit code 0","categories":[],"tags":[]},{"title":"Mybatis初学","slug":"2022-4-11/Mybatis","date":"2022-04-11T14:31:27.955Z","updated":"2022-04-12T06:43:05.888Z","comments":true,"path":"2022/04/11/2022-4-11/Mybatis/","link":"","permalink":"https://dddwah11.github.io/2022/04/11/2022-4-11/Mybatis/","excerpt":"","text":"Mybatis1、什么是Mybatis​ MyBatis本是apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到了[google code](https://baike.baidu.com/item/google code&#x2F;2346604)，并且改名为MyBatis。2013年11月迁移到Github。 ​ iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）。 ​ 当前，最新版本是MyBatis 3.5.9，其发布时间是2021年12月26日。 2、持久化​ 持久化是将程序数据在持久状态和瞬时状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）。 3、持久层​ 可以理解成数据 保存在 数据库或者 硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上，mybatis就是持久层。 内存：断点即失 4、Maven项目下创建第一个mybatis程序4.1 导入依赖：mysql驱动、mybatis、lombok。注意：maven资源导出问题：最好，父类，子类都添加1234567891011121314151617181920&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 搭好项目结构： 4.3、去mybatis中文文档 粘贴需要用到的核心配置文件123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true&amp;amp;userUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt;&lt;!-- 注册Mapper--&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/xiaoliu/Mapper/UserMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 注意：注册mapper 4.4、编写实体类User123456789101112131415161718192021package com.xiaoliu.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * @author: 61分 * @date: 2022/4/11 17:35 * @description: */@Data@NoArgsConstructor@AllArgsConstructorpublic class User &#123; private int id; private String name; private String password;&#125; 4.5、编写Mapper接口及实现的配置文件1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--namespace=绑定对应的Mapper接口--&gt;&lt;mapper namespace=&quot;com.xiaoliu.Mapper.UserMapper&quot;&gt;&lt;!-- id对应的是方法名称--&gt; &lt;select id=&quot;getUserList&quot; resultType=&quot;com.xiaoliu.pojo.User&quot;&gt; select * from mybatis.user &lt;/select&gt;&lt;/mapper&gt; 配置文件 UserMappe接口 123456789101112131415package com.xiaoliu.Mapper;import com.xiaoliu.pojo.User;import java.util.List;/** * @author: 61分 * @date: 2022/4/11 17:41 * @description: */public interface UserMapper &#123; List&lt;User&gt; getUserList();&#125; ​ 4.6、编写MybatisUtil类获取SQLSession 执行SQLSession 123456789101112131415161718192021222324252627282930313233343536package com.xiaoliu.utils;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;/** * @author: 61分 * @date: 2022/4/11 15:55 * @description:获取SQLSessionFactory */public class MybatisUtils &#123; private static SqlSessionFactory sqlSessionFactory; static &#123; try &#123;// 获取SQLSessionFactory-》SQLSession String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; // 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。 // SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。// 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。 public static SqlSession getSqlSession()&#123; return sqlSessionFactory.openSession(); &#125;&#125; 4.7、编写Test类进行测试1234567891011121314151617181920212223242526272829303132333435package com.xiaoliu.Mapper;import com.xiaoliu.pojo.User;import com.xiaoliu.utils.MybatisUtils;import org.apache.ibatis.session.SqlSession;import org.junit.Test;import java.util.List;/** * @author: 61分 * @date: 2022/4/11 18:00 * @description: */public class UserMapperTest &#123; @Test public void test()&#123;// 第一步：获得sqlSession对象 SqlSession sqlSession = MybatisUtils.getSqlSession(); System.out.println(&quot;getsqlSession&quot;);// 第二步，方式一：getMapper UserMapper mapper = sqlSession.getMapper(UserMapper.class); List&lt;User&gt; userList = mapper.getUserList(); System.out.println(&quot;getMapper&quot;); for (User user : userList) &#123; System.out.println(user); &#125;// 关闭sqlSession System.out.println(&quot;close&quot;); sqlSession.close(); &#125;&#125; 测试成功： 5、学习总结​ 注意注册Mapper，及maven资源导出的问题","categories":[],"tags":[]},{"title":"欢迎来到小刘的博客","slug":"25524/hello-world","date":"2022-03-21T10:01:26.447Z","updated":"2022-04-15T13:06:03.955Z","comments":true,"path":"2022/03/21/25524/hello-world/","link":"","permalink":"https://dddwah11.github.io/2022/03/21/25524/hello-world/","excerpt":"","text":"暂时不知道写点啥","categories":[],"tags":[]}],"categories":[{"name":"学习","slug":"学习","permalink":"https://dddwah11.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://dddwah11.github.io/tags/%E6%B5%8B%E8%AF%95/"}]}